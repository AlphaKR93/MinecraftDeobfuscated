/*
 * Decompiled with CFR 0.1.0 (FabricMC a830a72d).
 * 
 * Could not load the following classes:
 *  com.google.common.collect.ImmutableList
 *  java.lang.Character
 *  java.lang.Object
 *  java.lang.Override
 *  java.util.concurrent.CompletableFuture
 *  java.util.function.Consumer
 */
package net.minecraft.data.recipes.packs;

import com.google.common.collect.ImmutableList;
import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;
import net.minecraft.advancements.Advancement;
import net.minecraft.advancements.critereon.EntityPredicate;
import net.minecraft.advancements.critereon.ImpossibleTrigger;
import net.minecraft.advancements.critereon.InventoryChangeTrigger;
import net.minecraft.advancements.critereon.ItemPredicate;
import net.minecraft.advancements.critereon.MinMaxBounds;
import net.minecraft.data.CachedOutput;
import net.minecraft.data.PackOutput;
import net.minecraft.data.recipes.FinishedRecipe;
import net.minecraft.data.recipes.RecipeBuilder;
import net.minecraft.data.recipes.RecipeCategory;
import net.minecraft.data.recipes.RecipeProvider;
import net.minecraft.data.recipes.ShapedRecipeBuilder;
import net.minecraft.data.recipes.ShapelessRecipeBuilder;
import net.minecraft.data.recipes.SimpleCookingRecipeBuilder;
import net.minecraft.data.recipes.SingleItemRecipeBuilder;
import net.minecraft.data.recipes.SpecialRecipeBuilder;
import net.minecraft.tags.ItemTags;
import net.minecraft.world.flag.FeatureFlagSet;
import net.minecraft.world.flag.FeatureFlags;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.crafting.Ingredient;
import net.minecraft.world.item.crafting.RecipeSerializer;
import net.minecraft.world.level.ItemLike;
import net.minecraft.world.level.block.Blocks;

public class VanillaRecipeProvider
extends RecipeProvider {
    private static final ImmutableList<ItemLike> COAL_SMELTABLES = ImmutableList.of((Object)Items.COAL_ORE, (Object)Items.DEEPSLATE_COAL_ORE);
    private static final ImmutableList<ItemLike> IRON_SMELTABLES = ImmutableList.of((Object)Items.IRON_ORE, (Object)Items.DEEPSLATE_IRON_ORE, (Object)Items.RAW_IRON);
    private static final ImmutableList<ItemLike> COPPER_SMELTABLES = ImmutableList.of((Object)Items.COPPER_ORE, (Object)Items.DEEPSLATE_COPPER_ORE, (Object)Items.RAW_COPPER);
    private static final ImmutableList<ItemLike> GOLD_SMELTABLES = ImmutableList.of((Object)Items.GOLD_ORE, (Object)Items.DEEPSLATE_GOLD_ORE, (Object)Items.NETHER_GOLD_ORE, (Object)Items.RAW_GOLD);
    private static final ImmutableList<ItemLike> DIAMOND_SMELTABLES = ImmutableList.of((Object)Items.DIAMOND_ORE, (Object)Items.DEEPSLATE_DIAMOND_ORE);
    private static final ImmutableList<ItemLike> LAPIS_SMELTABLES = ImmutableList.of((Object)Items.LAPIS_ORE, (Object)Items.DEEPSLATE_LAPIS_ORE);
    private static final ImmutableList<ItemLike> REDSTONE_SMELTABLES = ImmutableList.of((Object)Items.REDSTONE_ORE, (Object)Items.DEEPSLATE_REDSTONE_ORE);
    private static final ImmutableList<ItemLike> EMERALD_SMELTABLES = ImmutableList.of((Object)Items.EMERALD_ORE, (Object)Items.DEEPSLATE_EMERALD_ORE);

    public VanillaRecipeProvider(PackOutput $$0) {
        super($$0);
    }

    @Override
    public CompletableFuture<?> run(CachedOutput $$0) {
        return CompletableFuture.allOf((CompletableFuture[])new CompletableFuture[]{super.run($$0), this.buildAdvancement($$0, RecipeBuilder.ROOT_RECIPE_ADVANCEMENT, Advancement.Builder.advancement().addCriterion("impossible", new ImpossibleTrigger.TriggerInstance()))});
    }

    @Override
    protected void buildRecipes(Consumer<FinishedRecipe> $$0) {
        VanillaRecipeProvider.generateForEnabledBlockFamilies($$0, FeatureFlagSet.of(FeatureFlags.VANILLA));
        VanillaRecipeProvider.planksFromLog($$0, Blocks.ACACIA_PLANKS, ItemTags.ACACIA_LOGS, 4);
        VanillaRecipeProvider.planksFromLogs($$0, Blocks.BIRCH_PLANKS, ItemTags.BIRCH_LOGS, 4);
        VanillaRecipeProvider.planksFromLogs($$0, Blocks.CRIMSON_PLANKS, ItemTags.CRIMSON_STEMS, 4);
        VanillaRecipeProvider.planksFromLog($$0, Blocks.DARK_OAK_PLANKS, ItemTags.DARK_OAK_LOGS, 4);
        VanillaRecipeProvider.planksFromLogs($$0, Blocks.JUNGLE_PLANKS, ItemTags.JUNGLE_LOGS, 4);
        VanillaRecipeProvider.planksFromLogs($$0, Blocks.OAK_PLANKS, ItemTags.OAK_LOGS, 4);
        VanillaRecipeProvider.planksFromLogs($$0, Blocks.SPRUCE_PLANKS, ItemTags.SPRUCE_LOGS, 4);
        VanillaRecipeProvider.planksFromLogs($$0, Blocks.WARPED_PLANKS, ItemTags.WARPED_STEMS, 4);
        VanillaRecipeProvider.planksFromLogs($$0, Blocks.MANGROVE_PLANKS, ItemTags.MANGROVE_LOGS, 4);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.ACACIA_WOOD, Blocks.ACACIA_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.BIRCH_WOOD, Blocks.BIRCH_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.DARK_OAK_WOOD, Blocks.DARK_OAK_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.JUNGLE_WOOD, Blocks.JUNGLE_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.OAK_WOOD, Blocks.OAK_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.SPRUCE_WOOD, Blocks.SPRUCE_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.CRIMSON_HYPHAE, Blocks.CRIMSON_STEM);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.WARPED_HYPHAE, Blocks.WARPED_STEM);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.MANGROVE_WOOD, Blocks.MANGROVE_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.STRIPPED_ACACIA_WOOD, Blocks.STRIPPED_ACACIA_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.STRIPPED_BIRCH_WOOD, Blocks.STRIPPED_BIRCH_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.STRIPPED_DARK_OAK_WOOD, Blocks.STRIPPED_DARK_OAK_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.STRIPPED_JUNGLE_WOOD, Blocks.STRIPPED_JUNGLE_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.STRIPPED_OAK_WOOD, Blocks.STRIPPED_OAK_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.STRIPPED_SPRUCE_WOOD, Blocks.STRIPPED_SPRUCE_LOG);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.STRIPPED_CRIMSON_HYPHAE, Blocks.STRIPPED_CRIMSON_STEM);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.STRIPPED_WARPED_HYPHAE, Blocks.STRIPPED_WARPED_STEM);
        VanillaRecipeProvider.woodFromLogs($$0, Blocks.STRIPPED_MANGROVE_WOOD, Blocks.STRIPPED_MANGROVE_LOG);
        VanillaRecipeProvider.woodenBoat($$0, Items.ACACIA_BOAT, Blocks.ACACIA_PLANKS);
        VanillaRecipeProvider.woodenBoat($$0, Items.BIRCH_BOAT, Blocks.BIRCH_PLANKS);
        VanillaRecipeProvider.woodenBoat($$0, Items.DARK_OAK_BOAT, Blocks.DARK_OAK_PLANKS);
        VanillaRecipeProvider.woodenBoat($$0, Items.JUNGLE_BOAT, Blocks.JUNGLE_PLANKS);
        VanillaRecipeProvider.woodenBoat($$0, Items.OAK_BOAT, Blocks.OAK_PLANKS);
        VanillaRecipeProvider.woodenBoat($$0, Items.SPRUCE_BOAT, Blocks.SPRUCE_PLANKS);
        VanillaRecipeProvider.woodenBoat($$0, Items.MANGROVE_BOAT, Blocks.MANGROVE_PLANKS);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.BLACK_WOOL, Items.BLACK_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.BLACK_CARPET, Blocks.BLACK_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.BLACK_CARPET, Items.BLACK_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.BLACK_BED, Blocks.BLACK_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.BLACK_BED, Items.BLACK_DYE);
        VanillaRecipeProvider.banner($$0, Items.BLACK_BANNER, Blocks.BLACK_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.BLUE_WOOL, Items.BLUE_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.BLUE_CARPET, Blocks.BLUE_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.BLUE_CARPET, Items.BLUE_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.BLUE_BED, Blocks.BLUE_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.BLUE_BED, Items.BLUE_DYE);
        VanillaRecipeProvider.banner($$0, Items.BLUE_BANNER, Blocks.BLUE_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.BROWN_WOOL, Items.BROWN_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.BROWN_CARPET, Blocks.BROWN_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.BROWN_CARPET, Items.BROWN_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.BROWN_BED, Blocks.BROWN_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.BROWN_BED, Items.BROWN_DYE);
        VanillaRecipeProvider.banner($$0, Items.BROWN_BANNER, Blocks.BROWN_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.CYAN_WOOL, Items.CYAN_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.CYAN_CARPET, Blocks.CYAN_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.CYAN_CARPET, Items.CYAN_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.CYAN_BED, Blocks.CYAN_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.CYAN_BED, Items.CYAN_DYE);
        VanillaRecipeProvider.banner($$0, Items.CYAN_BANNER, Blocks.CYAN_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.GRAY_WOOL, Items.GRAY_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.GRAY_CARPET, Blocks.GRAY_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.GRAY_CARPET, Items.GRAY_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.GRAY_BED, Blocks.GRAY_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.GRAY_BED, Items.GRAY_DYE);
        VanillaRecipeProvider.banner($$0, Items.GRAY_BANNER, Blocks.GRAY_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.GREEN_WOOL, Items.GREEN_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.GREEN_CARPET, Blocks.GREEN_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.GREEN_CARPET, Items.GREEN_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.GREEN_BED, Blocks.GREEN_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.GREEN_BED, Items.GREEN_DYE);
        VanillaRecipeProvider.banner($$0, Items.GREEN_BANNER, Blocks.GREEN_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.LIGHT_BLUE_WOOL, Items.LIGHT_BLUE_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.LIGHT_BLUE_CARPET, Blocks.LIGHT_BLUE_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.LIGHT_BLUE_CARPET, Items.LIGHT_BLUE_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.LIGHT_BLUE_BED, Blocks.LIGHT_BLUE_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.LIGHT_BLUE_BED, Items.LIGHT_BLUE_DYE);
        VanillaRecipeProvider.banner($$0, Items.LIGHT_BLUE_BANNER, Blocks.LIGHT_BLUE_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.LIGHT_GRAY_WOOL, Items.LIGHT_GRAY_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.LIGHT_GRAY_CARPET, Blocks.LIGHT_GRAY_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.LIGHT_GRAY_CARPET, Items.LIGHT_GRAY_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.LIGHT_GRAY_BED, Blocks.LIGHT_GRAY_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.LIGHT_GRAY_BED, Items.LIGHT_GRAY_DYE);
        VanillaRecipeProvider.banner($$0, Items.LIGHT_GRAY_BANNER, Blocks.LIGHT_GRAY_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.LIME_WOOL, Items.LIME_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.LIME_CARPET, Blocks.LIME_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.LIME_CARPET, Items.LIME_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.LIME_BED, Blocks.LIME_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.LIME_BED, Items.LIME_DYE);
        VanillaRecipeProvider.banner($$0, Items.LIME_BANNER, Blocks.LIME_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.MAGENTA_WOOL, Items.MAGENTA_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.MAGENTA_CARPET, Blocks.MAGENTA_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.MAGENTA_CARPET, Items.MAGENTA_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.MAGENTA_BED, Blocks.MAGENTA_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.MAGENTA_BED, Items.MAGENTA_DYE);
        VanillaRecipeProvider.banner($$0, Items.MAGENTA_BANNER, Blocks.MAGENTA_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.ORANGE_WOOL, Items.ORANGE_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.ORANGE_CARPET, Blocks.ORANGE_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.ORANGE_CARPET, Items.ORANGE_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.ORANGE_BED, Blocks.ORANGE_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.ORANGE_BED, Items.ORANGE_DYE);
        VanillaRecipeProvider.banner($$0, Items.ORANGE_BANNER, Blocks.ORANGE_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.PINK_WOOL, Items.PINK_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.PINK_CARPET, Blocks.PINK_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.PINK_CARPET, Items.PINK_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.PINK_BED, Blocks.PINK_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.PINK_BED, Items.PINK_DYE);
        VanillaRecipeProvider.banner($$0, Items.PINK_BANNER, Blocks.PINK_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.PURPLE_WOOL, Items.PURPLE_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.PURPLE_CARPET, Blocks.PURPLE_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.PURPLE_CARPET, Items.PURPLE_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.PURPLE_BED, Blocks.PURPLE_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.PURPLE_BED, Items.PURPLE_DYE);
        VanillaRecipeProvider.banner($$0, Items.PURPLE_BANNER, Blocks.PURPLE_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.RED_WOOL, Items.RED_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.RED_CARPET, Blocks.RED_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.RED_CARPET, Items.RED_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.RED_BED, Blocks.RED_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.RED_BED, Items.RED_DYE);
        VanillaRecipeProvider.banner($$0, Items.RED_BANNER, Blocks.RED_WOOL);
        VanillaRecipeProvider.carpet($$0, Blocks.WHITE_CARPET, Blocks.WHITE_WOOL);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.WHITE_BED, Blocks.WHITE_WOOL);
        VanillaRecipeProvider.banner($$0, Items.WHITE_BANNER, Blocks.WHITE_WOOL);
        VanillaRecipeProvider.coloredWoolFromWhiteWoolAndDye($$0, Blocks.YELLOW_WOOL, Items.YELLOW_DYE);
        VanillaRecipeProvider.carpet($$0, Blocks.YELLOW_CARPET, Blocks.YELLOW_WOOL);
        VanillaRecipeProvider.coloredCarpetFromWhiteCarpetAndDye($$0, Blocks.YELLOW_CARPET, Items.YELLOW_DYE);
        VanillaRecipeProvider.bedFromPlanksAndWool($$0, Items.YELLOW_BED, Blocks.YELLOW_WOOL);
        VanillaRecipeProvider.bedFromWhiteBedAndDye($$0, Items.YELLOW_BED, Items.YELLOW_DYE);
        VanillaRecipeProvider.banner($$0, Items.YELLOW_BANNER, Blocks.YELLOW_WOOL);
        VanillaRecipeProvider.carpet($$0, Blocks.MOSS_CARPET, Blocks.MOSS_BLOCK);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.BLACK_STAINED_GLASS, Items.BLACK_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.BLACK_STAINED_GLASS_PANE, Blocks.BLACK_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.BLACK_STAINED_GLASS_PANE, Items.BLACK_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.BLUE_STAINED_GLASS, Items.BLUE_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.BLUE_STAINED_GLASS_PANE, Blocks.BLUE_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.BLUE_STAINED_GLASS_PANE, Items.BLUE_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.BROWN_STAINED_GLASS, Items.BROWN_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.BROWN_STAINED_GLASS_PANE, Blocks.BROWN_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.BROWN_STAINED_GLASS_PANE, Items.BROWN_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.CYAN_STAINED_GLASS, Items.CYAN_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.CYAN_STAINED_GLASS_PANE, Blocks.CYAN_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.CYAN_STAINED_GLASS_PANE, Items.CYAN_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.GRAY_STAINED_GLASS, Items.GRAY_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.GRAY_STAINED_GLASS_PANE, Blocks.GRAY_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.GRAY_STAINED_GLASS_PANE, Items.GRAY_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.GREEN_STAINED_GLASS, Items.GREEN_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.GREEN_STAINED_GLASS_PANE, Blocks.GREEN_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.GREEN_STAINED_GLASS_PANE, Items.GREEN_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.LIGHT_BLUE_STAINED_GLASS, Items.LIGHT_BLUE_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.LIGHT_BLUE_STAINED_GLASS_PANE, Blocks.LIGHT_BLUE_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.LIGHT_BLUE_STAINED_GLASS_PANE, Items.LIGHT_BLUE_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.LIGHT_GRAY_STAINED_GLASS, Items.LIGHT_GRAY_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.LIGHT_GRAY_STAINED_GLASS_PANE, Blocks.LIGHT_GRAY_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.LIGHT_GRAY_STAINED_GLASS_PANE, Items.LIGHT_GRAY_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.LIME_STAINED_GLASS, Items.LIME_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.LIME_STAINED_GLASS_PANE, Blocks.LIME_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.LIME_STAINED_GLASS_PANE, Items.LIME_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.MAGENTA_STAINED_GLASS, Items.MAGENTA_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.MAGENTA_STAINED_GLASS_PANE, Blocks.MAGENTA_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.MAGENTA_STAINED_GLASS_PANE, Items.MAGENTA_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.ORANGE_STAINED_GLASS, Items.ORANGE_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.ORANGE_STAINED_GLASS_PANE, Blocks.ORANGE_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.ORANGE_STAINED_GLASS_PANE, Items.ORANGE_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.PINK_STAINED_GLASS, Items.PINK_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.PINK_STAINED_GLASS_PANE, Blocks.PINK_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.PINK_STAINED_GLASS_PANE, Items.PINK_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.PURPLE_STAINED_GLASS, Items.PURPLE_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.PURPLE_STAINED_GLASS_PANE, Blocks.PURPLE_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.PURPLE_STAINED_GLASS_PANE, Items.PURPLE_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.RED_STAINED_GLASS, Items.RED_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.RED_STAINED_GLASS_PANE, Blocks.RED_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.RED_STAINED_GLASS_PANE, Items.RED_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.WHITE_STAINED_GLASS, Items.WHITE_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.WHITE_STAINED_GLASS_PANE, Blocks.WHITE_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.WHITE_STAINED_GLASS_PANE, Items.WHITE_DYE);
        VanillaRecipeProvider.stainedGlassFromGlassAndDye($$0, Blocks.YELLOW_STAINED_GLASS, Items.YELLOW_DYE);
        VanillaRecipeProvider.stainedGlassPaneFromStainedGlass($$0, Blocks.YELLOW_STAINED_GLASS_PANE, Blocks.YELLOW_STAINED_GLASS);
        VanillaRecipeProvider.stainedGlassPaneFromGlassPaneAndDye($$0, Blocks.YELLOW_STAINED_GLASS_PANE, Items.YELLOW_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.BLACK_TERRACOTTA, Items.BLACK_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.BLUE_TERRACOTTA, Items.BLUE_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.BROWN_TERRACOTTA, Items.BROWN_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.CYAN_TERRACOTTA, Items.CYAN_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.GRAY_TERRACOTTA, Items.GRAY_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.GREEN_TERRACOTTA, Items.GREEN_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.LIGHT_BLUE_TERRACOTTA, Items.LIGHT_BLUE_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.LIGHT_GRAY_TERRACOTTA, Items.LIGHT_GRAY_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.LIME_TERRACOTTA, Items.LIME_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.MAGENTA_TERRACOTTA, Items.MAGENTA_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.ORANGE_TERRACOTTA, Items.ORANGE_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.PINK_TERRACOTTA, Items.PINK_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.PURPLE_TERRACOTTA, Items.PURPLE_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.RED_TERRACOTTA, Items.RED_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.WHITE_TERRACOTTA, Items.WHITE_DYE);
        VanillaRecipeProvider.coloredTerracottaFromTerracottaAndDye($$0, Blocks.YELLOW_TERRACOTTA, Items.YELLOW_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.BLACK_CONCRETE_POWDER, Items.BLACK_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.BLUE_CONCRETE_POWDER, Items.BLUE_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.BROWN_CONCRETE_POWDER, Items.BROWN_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.CYAN_CONCRETE_POWDER, Items.CYAN_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.GRAY_CONCRETE_POWDER, Items.GRAY_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.GREEN_CONCRETE_POWDER, Items.GREEN_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.LIGHT_BLUE_CONCRETE_POWDER, Items.LIGHT_BLUE_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.LIGHT_GRAY_CONCRETE_POWDER, Items.LIGHT_GRAY_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.LIME_CONCRETE_POWDER, Items.LIME_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.MAGENTA_CONCRETE_POWDER, Items.MAGENTA_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.ORANGE_CONCRETE_POWDER, Items.ORANGE_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.PINK_CONCRETE_POWDER, Items.PINK_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.PURPLE_CONCRETE_POWDER, Items.PURPLE_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.RED_CONCRETE_POWDER, Items.RED_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.WHITE_CONCRETE_POWDER, Items.WHITE_DYE);
        VanillaRecipeProvider.concretePowder($$0, Blocks.YELLOW_CONCRETE_POWDER, Items.YELLOW_DYE);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Items.CANDLE).define(Character.valueOf((char)'S'), Items.STRING).define(Character.valueOf((char)'H'), Items.HONEYCOMB).pattern("S").pattern("H").unlockedBy("has_string", VanillaRecipeProvider.has(Items.STRING)).unlockedBy("has_honeycomb", VanillaRecipeProvider.has(Items.HONEYCOMB)).save($$0);
        VanillaRecipeProvider.candle($$0, Blocks.BLACK_CANDLE, Items.BLACK_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.BLUE_CANDLE, Items.BLUE_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.BROWN_CANDLE, Items.BROWN_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.CYAN_CANDLE, Items.CYAN_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.GRAY_CANDLE, Items.GRAY_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.GREEN_CANDLE, Items.GREEN_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.LIGHT_BLUE_CANDLE, Items.LIGHT_BLUE_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.LIGHT_GRAY_CANDLE, Items.LIGHT_GRAY_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.LIME_CANDLE, Items.LIME_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.MAGENTA_CANDLE, Items.MAGENTA_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.ORANGE_CANDLE, Items.ORANGE_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.PINK_CANDLE, Items.PINK_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.PURPLE_CANDLE, Items.PURPLE_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.RED_CANDLE, Items.RED_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.WHITE_CANDLE, Items.WHITE_DYE);
        VanillaRecipeProvider.candle($$0, Blocks.YELLOW_CANDLE, Items.YELLOW_DYE);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, Blocks.PACKED_MUD, 1).requires(Blocks.MUD).requires(Items.WHEAT).unlockedBy("has_mud", VanillaRecipeProvider.has(Blocks.MUD)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.MUD_BRICKS, 4).define(Character.valueOf((char)'#'), Blocks.PACKED_MUD).pattern("##").pattern("##").unlockedBy("has_packed_mud", VanillaRecipeProvider.has(Blocks.PACKED_MUD)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, Blocks.MUDDY_MANGROVE_ROOTS, 1).requires(Blocks.MUD).requires(Items.MANGROVE_ROOTS).unlockedBy("has_mangrove_roots", VanillaRecipeProvider.has(Blocks.MANGROVE_ROOTS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TRANSPORTATION, Blocks.ACTIVATOR_RAIL, 6).define(Character.valueOf((char)'#'), Blocks.REDSTONE_TORCH).define(Character.valueOf((char)'S'), Items.STICK).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("XSX").pattern("X#X").pattern("XSX").unlockedBy("has_rail", VanillaRecipeProvider.has(Blocks.RAIL)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, Blocks.ANDESITE, 2).requires(Blocks.DIORITE).requires(Blocks.COBBLESTONE).unlockedBy("has_stone", VanillaRecipeProvider.has(Blocks.DIORITE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.ANVIL).define(Character.valueOf((char)'I'), Blocks.IRON_BLOCK).define(Character.valueOf((char)'i'), Items.IRON_INGOT).pattern("III").pattern(" i ").pattern("iii").unlockedBy("has_iron_block", VanillaRecipeProvider.has(Blocks.IRON_BLOCK)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Items.ARMOR_STAND).define(Character.valueOf((char)'/'), Items.STICK).define(Character.valueOf((char)'_'), Blocks.SMOOTH_STONE_SLAB).pattern("///").pattern(" / ").pattern("/_/").unlockedBy("has_stone_slab", VanillaRecipeProvider.has(Blocks.SMOOTH_STONE_SLAB)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.ARROW, 4).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.FLINT).define(Character.valueOf((char)'Y'), Items.FEATHER).pattern("X").pattern("#").pattern("Y").unlockedBy("has_feather", VanillaRecipeProvider.has(Items.FEATHER)).unlockedBy("has_flint", VanillaRecipeProvider.has(Items.FLINT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.BARREL, 1).define(Character.valueOf((char)'P'), ItemTags.PLANKS).define(Character.valueOf((char)'S'), ItemTags.WOODEN_SLABS).pattern("PSP").pattern("P P").pattern("PSP").unlockedBy("has_planks", VanillaRecipeProvider.has(ItemTags.PLANKS)).unlockedBy("has_wood_slab", VanillaRecipeProvider.has(ItemTags.WOODEN_SLABS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.MISC, Blocks.BEACON).define(Character.valueOf((char)'S'), Items.NETHER_STAR).define(Character.valueOf((char)'G'), Blocks.GLASS).define(Character.valueOf((char)'O'), Blocks.OBSIDIAN).pattern("GGG").pattern("GSG").pattern("OOO").unlockedBy("has_nether_star", VanillaRecipeProvider.has(Items.NETHER_STAR)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.BEEHIVE).define(Character.valueOf((char)'P'), ItemTags.PLANKS).define(Character.valueOf((char)'H'), Items.HONEYCOMB).pattern("PPP").pattern("HHH").pattern("PPP").unlockedBy("has_honeycomb", VanillaRecipeProvider.has(Items.HONEYCOMB)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, Items.BEETROOT_SOUP).requires(Items.BOWL).requires(Items.BEETROOT, 6).unlockedBy("has_beetroot", VanillaRecipeProvider.has(Items.BEETROOT)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.BLACK_DYE).requires(Items.INK_SAC).group("black_dye").unlockedBy("has_ink_sac", VanillaRecipeProvider.has(Items.INK_SAC)).save($$0);
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.BLACK_DYE, Blocks.WITHER_ROSE, "black_dye");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BREWING, Items.BLAZE_POWDER, 2).requires(Items.BLAZE_ROD).unlockedBy("has_blaze_rod", VanillaRecipeProvider.has(Items.BLAZE_ROD)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.BLUE_DYE).requires(Items.LAPIS_LAZULI).group("blue_dye").unlockedBy("has_lapis_lazuli", VanillaRecipeProvider.has(Items.LAPIS_LAZULI)).save($$0);
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.BLUE_DYE, Blocks.CORNFLOWER, "blue_dye");
        VanillaRecipeProvider.threeByThreePacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.BLUE_ICE, Blocks.PACKED_ICE);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.BONE_MEAL, 3).requires(Items.BONE).group("bonemeal").unlockedBy("has_bone", VanillaRecipeProvider.has(Items.BONE)).save($$0);
        VanillaRecipeProvider.nineBlockStorageRecipesRecipesWithCustomUnpacking($$0, RecipeCategory.MISC, Items.BONE_MEAL, RecipeCategory.BUILDING_BLOCKS, Items.BONE_BLOCK, "bone_meal_from_bone_block", "bonemeal");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.BOOK).requires(Items.PAPER, 3).requires(Items.LEATHER).unlockedBy("has_paper", VanillaRecipeProvider.has(Items.PAPER)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.BOOKSHELF).define(Character.valueOf((char)'#'), ItemTags.PLANKS).define(Character.valueOf((char)'X'), Items.BOOK).pattern("###").pattern("XXX").pattern("###").unlockedBy("has_book", VanillaRecipeProvider.has(Items.BOOK)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.BOW).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.STRING).pattern(" #X").pattern("# X").pattern(" #X").unlockedBy("has_string", VanillaRecipeProvider.has(Items.STRING)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.MISC, Items.BOWL, 4).define(Character.valueOf((char)'#'), ItemTags.PLANKS).pattern("# #").pattern(" # ").unlockedBy("has_brown_mushroom", VanillaRecipeProvider.has(Blocks.BROWN_MUSHROOM)).unlockedBy("has_red_mushroom", VanillaRecipeProvider.has(Blocks.RED_MUSHROOM)).unlockedBy("has_mushroom_stew", VanillaRecipeProvider.has(Items.MUSHROOM_STEW)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.FOOD, Items.BREAD).define(Character.valueOf((char)'#'), Items.WHEAT).pattern("###").unlockedBy("has_wheat", VanillaRecipeProvider.has(Items.WHEAT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BREWING, Blocks.BREWING_STAND).define(Character.valueOf((char)'B'), Items.BLAZE_ROD).define(Character.valueOf((char)'#'), ItemTags.STONE_CRAFTING_MATERIALS).pattern(" B ").pattern("###").unlockedBy("has_blaze_rod", VanillaRecipeProvider.has(Items.BLAZE_ROD)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.BRICKS).define(Character.valueOf((char)'#'), Items.BRICK).pattern("##").pattern("##").unlockedBy("has_brick", VanillaRecipeProvider.has(Items.BRICK)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.BROWN_DYE).requires(Items.COCOA_BEANS).group("brown_dye").unlockedBy("has_cocoa_beans", VanillaRecipeProvider.has(Items.COCOA_BEANS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.MISC, Items.BUCKET).define(Character.valueOf((char)'#'), Items.IRON_INGOT).pattern("# #").pattern(" # ").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.FOOD, Blocks.CAKE).define(Character.valueOf((char)'A'), Items.MILK_BUCKET).define(Character.valueOf((char)'B'), Items.SUGAR).define(Character.valueOf((char)'C'), Items.WHEAT).define(Character.valueOf((char)'E'), Items.EGG).pattern("AAA").pattern("BEB").pattern("CCC").unlockedBy("has_egg", VanillaRecipeProvider.has(Items.EGG)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.CAMPFIRE).define(Character.valueOf((char)'L'), ItemTags.LOGS).define(Character.valueOf((char)'S'), Items.STICK).define(Character.valueOf((char)'C'), ItemTags.COALS).pattern(" S ").pattern("SCS").pattern("LLL").unlockedBy("has_stick", VanillaRecipeProvider.has(Items.STICK)).unlockedBy("has_coal", VanillaRecipeProvider.has(ItemTags.COALS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TRANSPORTATION, Items.CARROT_ON_A_STICK).define(Character.valueOf((char)'#'), Items.FISHING_ROD).define(Character.valueOf((char)'X'), Items.CARROT).pattern("# ").pattern(" X").unlockedBy("has_carrot", VanillaRecipeProvider.has(Items.CARROT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TRANSPORTATION, Items.WARPED_FUNGUS_ON_A_STICK).define(Character.valueOf((char)'#'), Items.FISHING_ROD).define(Character.valueOf((char)'X'), Items.WARPED_FUNGUS).pattern("# ").pattern(" X").unlockedBy("has_warped_fungus", VanillaRecipeProvider.has(Items.WARPED_FUNGUS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BREWING, Blocks.CAULDRON).define(Character.valueOf((char)'#'), Items.IRON_INGOT).pattern("# #").pattern("# #").pattern("###").unlockedBy("has_water_bucket", VanillaRecipeProvider.has(Items.WATER_BUCKET)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.COMPOSTER).define(Character.valueOf((char)'#'), ItemTags.WOODEN_SLABS).pattern("# #").pattern("# #").pattern("###").unlockedBy("has_wood_slab", VanillaRecipeProvider.has(ItemTags.WOODEN_SLABS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.CHEST).define(Character.valueOf((char)'#'), ItemTags.PLANKS).pattern("###").pattern("# #").pattern("###").unlockedBy("has_lots_of_items", new InventoryChangeTrigger.TriggerInstance(EntityPredicate.Composite.ANY, MinMaxBounds.Ints.atLeast(10), MinMaxBounds.Ints.ANY, MinMaxBounds.Ints.ANY, new ItemPredicate[0])).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.TRANSPORTATION, Items.CHEST_MINECART).requires(Blocks.CHEST).requires(Items.MINECART).unlockedBy("has_minecart", VanillaRecipeProvider.has(Items.MINECART)).save($$0);
        VanillaRecipeProvider.chestBoat($$0, Items.ACACIA_CHEST_BOAT, Items.ACACIA_BOAT);
        VanillaRecipeProvider.chestBoat($$0, Items.BIRCH_CHEST_BOAT, Items.BIRCH_BOAT);
        VanillaRecipeProvider.chestBoat($$0, Items.DARK_OAK_CHEST_BOAT, Items.DARK_OAK_BOAT);
        VanillaRecipeProvider.chestBoat($$0, Items.JUNGLE_CHEST_BOAT, Items.JUNGLE_BOAT);
        VanillaRecipeProvider.chestBoat($$0, Items.OAK_CHEST_BOAT, Items.OAK_BOAT);
        VanillaRecipeProvider.chestBoat($$0, Items.SPRUCE_CHEST_BOAT, Items.SPRUCE_BOAT);
        VanillaRecipeProvider.chestBoat($$0, Items.MANGROVE_CHEST_BOAT, Items.MANGROVE_BOAT);
        VanillaRecipeProvider.chiseledBuilder(RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_QUARTZ_BLOCK, Ingredient.of(Blocks.QUARTZ_SLAB)).unlockedBy("has_chiseled_quartz_block", VanillaRecipeProvider.has(Blocks.CHISELED_QUARTZ_BLOCK)).unlockedBy("has_quartz_block", VanillaRecipeProvider.has(Blocks.QUARTZ_BLOCK)).unlockedBy("has_quartz_pillar", VanillaRecipeProvider.has(Blocks.QUARTZ_PILLAR)).save($$0);
        VanillaRecipeProvider.chiseledBuilder(RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_STONE_BRICKS, Ingredient.of(Blocks.STONE_BRICK_SLAB)).unlockedBy("has_tag", VanillaRecipeProvider.has(ItemTags.STONE_BRICKS)).save($$0);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CLAY, Items.CLAY_BALL);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.CLOCK).define(Character.valueOf((char)'#'), Items.GOLD_INGOT).define(Character.valueOf((char)'X'), Items.REDSTONE).pattern(" # ").pattern("#X#").pattern(" # ").unlockedBy("has_redstone", VanillaRecipeProvider.has(Items.REDSTONE)).save($$0);
        VanillaRecipeProvider.nineBlockStorageRecipes($$0, RecipeCategory.MISC, Items.COAL, RecipeCategory.BUILDING_BLOCKS, Items.COAL_BLOCK);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.COARSE_DIRT, 4).define(Character.valueOf((char)'D'), Blocks.DIRT).define(Character.valueOf((char)'G'), Blocks.GRAVEL).pattern("DG").pattern("GD").unlockedBy("has_gravel", VanillaRecipeProvider.has(Blocks.GRAVEL)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.COMPARATOR).define(Character.valueOf((char)'#'), Blocks.REDSTONE_TORCH).define(Character.valueOf((char)'X'), Items.QUARTZ).define(Character.valueOf((char)'I'), Blocks.STONE).pattern(" # ").pattern("#X#").pattern("III").unlockedBy("has_quartz", VanillaRecipeProvider.has(Items.QUARTZ)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.COMPASS).define(Character.valueOf((char)'#'), Items.IRON_INGOT).define(Character.valueOf((char)'X'), Items.REDSTONE).pattern(" # ").pattern("#X#").pattern(" # ").unlockedBy("has_redstone", VanillaRecipeProvider.has(Items.REDSTONE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.FOOD, Items.COOKIE, 8).define(Character.valueOf((char)'#'), Items.WHEAT).define(Character.valueOf((char)'X'), Items.COCOA_BEANS).pattern("#X#").unlockedBy("has_cocoa", VanillaRecipeProvider.has(Items.COCOA_BEANS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.CRAFTING_TABLE).define(Character.valueOf((char)'#'), ItemTags.PLANKS).pattern("##").pattern("##").unlockedBy("has_planks", VanillaRecipeProvider.has(ItemTags.PLANKS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.CROSSBOW).define(Character.valueOf((char)'~'), Items.STRING).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'&'), Items.IRON_INGOT).define(Character.valueOf((char)'$'), Blocks.TRIPWIRE_HOOK).pattern("#&#").pattern("~$~").pattern(" # ").unlockedBy("has_string", VanillaRecipeProvider.has(Items.STRING)).unlockedBy("has_stick", VanillaRecipeProvider.has(Items.STICK)).unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).unlockedBy("has_tripwire_hook", VanillaRecipeProvider.has(Blocks.TRIPWIRE_HOOK)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.LOOM).define(Character.valueOf((char)'#'), ItemTags.PLANKS).define(Character.valueOf((char)'@'), Items.STRING).pattern("@@").pattern("##").unlockedBy("has_string", VanillaRecipeProvider.has(Items.STRING)).save($$0);
        VanillaRecipeProvider.chiseledBuilder(RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_RED_SANDSTONE, Ingredient.of(Blocks.RED_SANDSTONE_SLAB)).unlockedBy("has_red_sandstone", VanillaRecipeProvider.has(Blocks.RED_SANDSTONE)).unlockedBy("has_chiseled_red_sandstone", VanillaRecipeProvider.has(Blocks.CHISELED_RED_SANDSTONE)).unlockedBy("has_cut_red_sandstone", VanillaRecipeProvider.has(Blocks.CUT_RED_SANDSTONE)).save($$0);
        VanillaRecipeProvider.chiseled($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_SANDSTONE, Blocks.SANDSTONE_SLAB);
        VanillaRecipeProvider.nineBlockStorageRecipesRecipesWithCustomUnpacking($$0, RecipeCategory.MISC, Items.COPPER_INGOT, RecipeCategory.BUILDING_BLOCKS, Items.COPPER_BLOCK, VanillaRecipeProvider.getSimpleRecipeName(Items.COPPER_INGOT), VanillaRecipeProvider.getItemName(Items.COPPER_INGOT));
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.COPPER_INGOT, 9).requires(Blocks.WAXED_COPPER_BLOCK).group(VanillaRecipeProvider.getItemName(Items.COPPER_INGOT)).unlockedBy(VanillaRecipeProvider.getHasName(Blocks.WAXED_COPPER_BLOCK), VanillaRecipeProvider.has(Blocks.WAXED_COPPER_BLOCK)).save($$0, VanillaRecipeProvider.getConversionRecipeName(Items.COPPER_INGOT, Blocks.WAXED_COPPER_BLOCK));
        VanillaRecipeProvider.waxRecipes($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.CYAN_DYE, 2).requires(Items.BLUE_DYE).requires(Items.GREEN_DYE).unlockedBy("has_green_dye", VanillaRecipeProvider.has(Items.GREEN_DYE)).unlockedBy("has_blue_dye", VanillaRecipeProvider.has(Items.BLUE_DYE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.DARK_PRISMARINE).define(Character.valueOf((char)'S'), Items.PRISMARINE_SHARD).define(Character.valueOf((char)'I'), Items.BLACK_DYE).pattern("SSS").pattern("SIS").pattern("SSS").unlockedBy("has_prismarine_shard", VanillaRecipeProvider.has(Items.PRISMARINE_SHARD)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.DAYLIGHT_DETECTOR).define(Character.valueOf((char)'Q'), Items.QUARTZ).define(Character.valueOf((char)'G'), Blocks.GLASS).define(Character.valueOf((char)'W'), Ingredient.of(ItemTags.WOODEN_SLABS)).pattern("GGG").pattern("QQQ").pattern("WWW").unlockedBy("has_quartz", VanillaRecipeProvider.has(Items.QUARTZ)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_BRICKS, 4).define(Character.valueOf((char)'S'), Blocks.POLISHED_DEEPSLATE).pattern("SS").pattern("SS").unlockedBy("has_polished_deepslate", VanillaRecipeProvider.has(Blocks.POLISHED_DEEPSLATE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILES, 4).define(Character.valueOf((char)'S'), Blocks.DEEPSLATE_BRICKS).pattern("SS").pattern("SS").unlockedBy("has_deepslate_bricks", VanillaRecipeProvider.has(Blocks.DEEPSLATE_BRICKS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TRANSPORTATION, Blocks.DETECTOR_RAIL, 6).define(Character.valueOf((char)'R'), Items.REDSTONE).define(Character.valueOf((char)'#'), Blocks.STONE_PRESSURE_PLATE).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("X X").pattern("X#X").pattern("XRX").unlockedBy("has_rail", VanillaRecipeProvider.has(Blocks.RAIL)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.DIAMOND_AXE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.DIAMOND).pattern("XX").pattern("X#").pattern(" #").unlockedBy("has_diamond", VanillaRecipeProvider.has(Items.DIAMOND)).save($$0);
        VanillaRecipeProvider.nineBlockStorageRecipes($$0, RecipeCategory.MISC, Items.DIAMOND, RecipeCategory.BUILDING_BLOCKS, Items.DIAMOND_BLOCK);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.DIAMOND_BOOTS).define(Character.valueOf((char)'X'), Items.DIAMOND).pattern("X X").pattern("X X").unlockedBy("has_diamond", VanillaRecipeProvider.has(Items.DIAMOND)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.DIAMOND_CHESTPLATE).define(Character.valueOf((char)'X'), Items.DIAMOND).pattern("X X").pattern("XXX").pattern("XXX").unlockedBy("has_diamond", VanillaRecipeProvider.has(Items.DIAMOND)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.DIAMOND_HELMET).define(Character.valueOf((char)'X'), Items.DIAMOND).pattern("XXX").pattern("X X").unlockedBy("has_diamond", VanillaRecipeProvider.has(Items.DIAMOND)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.DIAMOND_HOE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.DIAMOND).pattern("XX").pattern(" #").pattern(" #").unlockedBy("has_diamond", VanillaRecipeProvider.has(Items.DIAMOND)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.DIAMOND_LEGGINGS).define(Character.valueOf((char)'X'), Items.DIAMOND).pattern("XXX").pattern("X X").pattern("X X").unlockedBy("has_diamond", VanillaRecipeProvider.has(Items.DIAMOND)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.DIAMOND_PICKAXE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.DIAMOND).pattern("XXX").pattern(" # ").pattern(" # ").unlockedBy("has_diamond", VanillaRecipeProvider.has(Items.DIAMOND)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.DIAMOND_SHOVEL).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.DIAMOND).pattern("X").pattern("#").pattern("#").unlockedBy("has_diamond", VanillaRecipeProvider.has(Items.DIAMOND)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.DIAMOND_SWORD).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.DIAMOND).pattern("X").pattern("X").pattern("#").unlockedBy("has_diamond", VanillaRecipeProvider.has(Items.DIAMOND)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.DIORITE, 2).define(Character.valueOf((char)'Q'), Items.QUARTZ).define(Character.valueOf((char)'C'), Blocks.COBBLESTONE).pattern("CQ").pattern("QC").unlockedBy("has_quartz", VanillaRecipeProvider.has(Items.QUARTZ)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.DISPENSER).define(Character.valueOf((char)'R'), Items.REDSTONE).define(Character.valueOf((char)'#'), Blocks.COBBLESTONE).define(Character.valueOf((char)'X'), Items.BOW).pattern("###").pattern("#X#").pattern("#R#").unlockedBy("has_bow", VanillaRecipeProvider.has(Items.BOW)).save($$0);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DRIPSTONE_BLOCK, Items.POINTED_DRIPSTONE);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.DROPPER).define(Character.valueOf((char)'R'), Items.REDSTONE).define(Character.valueOf((char)'#'), Blocks.COBBLESTONE).pattern("###").pattern("# #").pattern("#R#").unlockedBy("has_redstone", VanillaRecipeProvider.has(Items.REDSTONE)).save($$0);
        VanillaRecipeProvider.nineBlockStorageRecipes($$0, RecipeCategory.MISC, Items.EMERALD, RecipeCategory.BUILDING_BLOCKS, Items.EMERALD_BLOCK);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.ENCHANTING_TABLE).define(Character.valueOf((char)'B'), Items.BOOK).define(Character.valueOf((char)'#'), Blocks.OBSIDIAN).define(Character.valueOf((char)'D'), Items.DIAMOND).pattern(" B ").pattern("D#D").pattern("###").unlockedBy("has_obsidian", VanillaRecipeProvider.has(Blocks.OBSIDIAN)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.ENDER_CHEST).define(Character.valueOf((char)'#'), Blocks.OBSIDIAN).define(Character.valueOf((char)'E'), Items.ENDER_EYE).pattern("###").pattern("#E#").pattern("###").unlockedBy("has_ender_eye", VanillaRecipeProvider.has(Items.ENDER_EYE)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.ENDER_EYE).requires(Items.ENDER_PEARL).requires(Items.BLAZE_POWDER).unlockedBy("has_blaze_powder", VanillaRecipeProvider.has(Items.BLAZE_POWDER)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.END_STONE_BRICKS, 4).define(Character.valueOf((char)'#'), Blocks.END_STONE).pattern("##").pattern("##").unlockedBy("has_end_stone", VanillaRecipeProvider.has(Blocks.END_STONE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Items.END_CRYSTAL).define(Character.valueOf((char)'T'), Items.GHAST_TEAR).define(Character.valueOf((char)'E'), Items.ENDER_EYE).define(Character.valueOf((char)'G'), Blocks.GLASS).pattern("GGG").pattern("GEG").pattern("GTG").unlockedBy("has_ender_eye", VanillaRecipeProvider.has(Items.ENDER_EYE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.END_ROD, 4).define(Character.valueOf((char)'#'), Items.POPPED_CHORUS_FRUIT).define(Character.valueOf((char)'/'), Items.BLAZE_ROD).pattern("/").pattern("#").unlockedBy("has_chorus_fruit_popped", VanillaRecipeProvider.has(Items.POPPED_CHORUS_FRUIT)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BREWING, Items.FERMENTED_SPIDER_EYE).requires(Items.SPIDER_EYE).requires(Blocks.BROWN_MUSHROOM).requires(Items.SUGAR).unlockedBy("has_spider_eye", VanillaRecipeProvider.has(Items.SPIDER_EYE)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.FIRE_CHARGE, 3).requires(Items.GUNPOWDER).requires(Items.BLAZE_POWDER).requires(Ingredient.of(Items.COAL, Items.CHARCOAL)).unlockedBy("has_blaze_powder", VanillaRecipeProvider.has(Items.BLAZE_POWDER)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.FIREWORK_ROCKET, 3).requires(Items.GUNPOWDER).requires(Items.PAPER).unlockedBy("has_gunpowder", VanillaRecipeProvider.has(Items.GUNPOWDER)).save($$0, "firework_rocket_simple");
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.FISHING_ROD).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.STRING).pattern("  #").pattern(" #X").pattern("# X").unlockedBy("has_string", VanillaRecipeProvider.has(Items.STRING)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.TOOLS, Items.FLINT_AND_STEEL).requires(Items.IRON_INGOT).requires(Items.FLINT).unlockedBy("has_flint", VanillaRecipeProvider.has(Items.FLINT)).unlockedBy("has_obsidian", VanillaRecipeProvider.has(Blocks.OBSIDIAN)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.FLOWER_POT).define(Character.valueOf((char)'#'), Items.BRICK).pattern("# #").pattern(" # ").unlockedBy("has_brick", VanillaRecipeProvider.has(Items.BRICK)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.FURNACE).define(Character.valueOf((char)'#'), ItemTags.STONE_CRAFTING_MATERIALS).pattern("###").pattern("# #").pattern("###").unlockedBy("has_cobblestone", VanillaRecipeProvider.has(ItemTags.STONE_CRAFTING_MATERIALS)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.TRANSPORTATION, Items.FURNACE_MINECART).requires(Blocks.FURNACE).requires(Items.MINECART).unlockedBy("has_minecart", VanillaRecipeProvider.has(Items.MINECART)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BREWING, Items.GLASS_BOTTLE, 3).define(Character.valueOf((char)'#'), Blocks.GLASS).pattern("# #").pattern(" # ").unlockedBy("has_glass", VanillaRecipeProvider.has(Blocks.GLASS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.GLASS_PANE, 16).define(Character.valueOf((char)'#'), Blocks.GLASS).pattern("###").pattern("###").unlockedBy("has_glass", VanillaRecipeProvider.has(Blocks.GLASS)).save($$0);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.GLOWSTONE, Items.GLOWSTONE_DUST);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.DECORATIONS, Items.GLOW_ITEM_FRAME).requires(Items.ITEM_FRAME).requires(Items.GLOW_INK_SAC).unlockedBy("has_item_frame", VanillaRecipeProvider.has(Items.ITEM_FRAME)).unlockedBy("has_glow_ink_sac", VanillaRecipeProvider.has(Items.GLOW_INK_SAC)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.FOOD, Items.GOLDEN_APPLE).define(Character.valueOf((char)'#'), Items.GOLD_INGOT).define(Character.valueOf((char)'X'), Items.APPLE).pattern("###").pattern("#X#").pattern("###").unlockedBy("has_gold_ingot", VanillaRecipeProvider.has(Items.GOLD_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.GOLDEN_AXE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.GOLD_INGOT).pattern("XX").pattern("X#").pattern(" #").unlockedBy("has_gold_ingot", VanillaRecipeProvider.has(Items.GOLD_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.GOLDEN_BOOTS).define(Character.valueOf((char)'X'), Items.GOLD_INGOT).pattern("X X").pattern("X X").unlockedBy("has_gold_ingot", VanillaRecipeProvider.has(Items.GOLD_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BREWING, Items.GOLDEN_CARROT).define(Character.valueOf((char)'#'), Items.GOLD_NUGGET).define(Character.valueOf((char)'X'), Items.CARROT).pattern("###").pattern("#X#").pattern("###").unlockedBy("has_gold_nugget", VanillaRecipeProvider.has(Items.GOLD_NUGGET)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.GOLDEN_CHESTPLATE).define(Character.valueOf((char)'X'), Items.GOLD_INGOT).pattern("X X").pattern("XXX").pattern("XXX").unlockedBy("has_gold_ingot", VanillaRecipeProvider.has(Items.GOLD_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.GOLDEN_HELMET).define(Character.valueOf((char)'X'), Items.GOLD_INGOT).pattern("XXX").pattern("X X").unlockedBy("has_gold_ingot", VanillaRecipeProvider.has(Items.GOLD_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.GOLDEN_HOE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.GOLD_INGOT).pattern("XX").pattern(" #").pattern(" #").unlockedBy("has_gold_ingot", VanillaRecipeProvider.has(Items.GOLD_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.GOLDEN_LEGGINGS).define(Character.valueOf((char)'X'), Items.GOLD_INGOT).pattern("XXX").pattern("X X").pattern("X X").unlockedBy("has_gold_ingot", VanillaRecipeProvider.has(Items.GOLD_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.GOLDEN_PICKAXE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.GOLD_INGOT).pattern("XXX").pattern(" # ").pattern(" # ").unlockedBy("has_gold_ingot", VanillaRecipeProvider.has(Items.GOLD_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TRANSPORTATION, Blocks.POWERED_RAIL, 6).define(Character.valueOf((char)'R'), Items.REDSTONE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.GOLD_INGOT).pattern("X X").pattern("X#X").pattern("XRX").unlockedBy("has_rail", VanillaRecipeProvider.has(Blocks.RAIL)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.GOLDEN_SHOVEL).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.GOLD_INGOT).pattern("X").pattern("#").pattern("#").unlockedBy("has_gold_ingot", VanillaRecipeProvider.has(Items.GOLD_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.GOLDEN_SWORD).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.GOLD_INGOT).pattern("X").pattern("X").pattern("#").unlockedBy("has_gold_ingot", VanillaRecipeProvider.has(Items.GOLD_INGOT)).save($$0);
        VanillaRecipeProvider.nineBlockStorageRecipesRecipesWithCustomUnpacking($$0, RecipeCategory.MISC, Items.GOLD_INGOT, RecipeCategory.BUILDING_BLOCKS, Items.GOLD_BLOCK, "gold_ingot_from_gold_block", "gold_ingot");
        VanillaRecipeProvider.nineBlockStorageRecipesWithCustomPacking($$0, RecipeCategory.MISC, Items.GOLD_NUGGET, RecipeCategory.MISC, Items.GOLD_INGOT, "gold_ingot_from_nuggets", "gold_ingot");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, Blocks.GRANITE).requires(Blocks.DIORITE).requires(Items.QUARTZ).unlockedBy("has_quartz", VanillaRecipeProvider.has(Items.QUARTZ)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.GRAY_DYE, 2).requires(Items.BLACK_DYE).requires(Items.WHITE_DYE).unlockedBy("has_white_dye", VanillaRecipeProvider.has(Items.WHITE_DYE)).unlockedBy("has_black_dye", VanillaRecipeProvider.has(Items.BLACK_DYE)).save($$0);
        VanillaRecipeProvider.threeByThreePacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.HAY_BLOCK, Items.WHEAT);
        VanillaRecipeProvider.pressurePlate($$0, Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE, Items.IRON_INGOT);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, Items.HONEY_BOTTLE, 4).requires(Items.HONEY_BLOCK).requires(Items.GLASS_BOTTLE, 4).unlockedBy("has_honey_block", VanillaRecipeProvider.has(Blocks.HONEY_BLOCK)).save($$0);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.REDSTONE, Blocks.HONEY_BLOCK, Items.HONEY_BOTTLE);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.DECORATIONS, Blocks.HONEYCOMB_BLOCK, Items.HONEYCOMB);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.HOPPER).define(Character.valueOf((char)'C'), Blocks.CHEST).define(Character.valueOf((char)'I'), Items.IRON_INGOT).pattern("I I").pattern("ICI").pattern(" I ").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.TRANSPORTATION, Items.HOPPER_MINECART).requires(Blocks.HOPPER).requires(Items.MINECART).unlockedBy("has_minecart", VanillaRecipeProvider.has(Items.MINECART)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.IRON_AXE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("XX").pattern("X#").pattern(" #").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.IRON_BARS, 16).define(Character.valueOf((char)'#'), Items.IRON_INGOT).pattern("###").pattern("###").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.IRON_BOOTS).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("X X").pattern("X X").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.IRON_CHESTPLATE).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("X X").pattern("XXX").pattern("XXX").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        VanillaRecipeProvider.doorBuilder(Blocks.IRON_DOOR, Ingredient.of(Items.IRON_INGOT)).unlockedBy(VanillaRecipeProvider.getHasName(Items.IRON_INGOT), VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.IRON_HELMET).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("XXX").pattern("X X").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.IRON_HOE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("XX").pattern(" #").pattern(" #").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        VanillaRecipeProvider.nineBlockStorageRecipesRecipesWithCustomUnpacking($$0, RecipeCategory.MISC, Items.IRON_INGOT, RecipeCategory.BUILDING_BLOCKS, Items.IRON_BLOCK, "iron_ingot_from_iron_block", "iron_ingot");
        VanillaRecipeProvider.nineBlockStorageRecipesWithCustomPacking($$0, RecipeCategory.MISC, Items.IRON_NUGGET, RecipeCategory.MISC, Items.IRON_INGOT, "iron_ingot_from_nuggets", "iron_ingot");
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.IRON_LEGGINGS).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("XXX").pattern("X X").pattern("X X").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.IRON_PICKAXE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("XXX").pattern(" # ").pattern(" # ").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.IRON_SHOVEL).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("X").pattern("#").pattern("#").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.IRON_SWORD).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("X").pattern("X").pattern("#").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.REDSTONE, Blocks.IRON_TRAPDOOR, Items.IRON_INGOT);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Items.ITEM_FRAME).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.LEATHER).pattern("###").pattern("#X#").pattern("###").unlockedBy("has_leather", VanillaRecipeProvider.has(Items.LEATHER)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.JUKEBOX).define(Character.valueOf((char)'#'), ItemTags.PLANKS).define(Character.valueOf((char)'X'), Items.DIAMOND).pattern("###").pattern("#X#").pattern("###").unlockedBy("has_diamond", VanillaRecipeProvider.has(Items.DIAMOND)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.LADDER, 3).define(Character.valueOf((char)'#'), Items.STICK).pattern("# #").pattern("###").pattern("# #").unlockedBy("has_stick", VanillaRecipeProvider.has(Items.STICK)).save($$0);
        VanillaRecipeProvider.nineBlockStorageRecipes($$0, RecipeCategory.MISC, Items.LAPIS_LAZULI, RecipeCategory.BUILDING_BLOCKS, Items.LAPIS_BLOCK);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.LEAD, 2).define(Character.valueOf((char)'~'), Items.STRING).define(Character.valueOf((char)'O'), Items.SLIME_BALL).pattern("~~ ").pattern("~O ").pattern("  ~").unlockedBy("has_slime_ball", VanillaRecipeProvider.has(Items.SLIME_BALL)).save($$0);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.MISC, Items.LEATHER, Items.RABBIT_HIDE);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.LEATHER_BOOTS).define(Character.valueOf((char)'X'), Items.LEATHER).pattern("X X").pattern("X X").unlockedBy("has_leather", VanillaRecipeProvider.has(Items.LEATHER)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.LEATHER_CHESTPLATE).define(Character.valueOf((char)'X'), Items.LEATHER).pattern("X X").pattern("XXX").pattern("XXX").unlockedBy("has_leather", VanillaRecipeProvider.has(Items.LEATHER)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.LEATHER_HELMET).define(Character.valueOf((char)'X'), Items.LEATHER).pattern("XXX").pattern("X X").unlockedBy("has_leather", VanillaRecipeProvider.has(Items.LEATHER)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.LEATHER_LEGGINGS).define(Character.valueOf((char)'X'), Items.LEATHER).pattern("XXX").pattern("X X").pattern("X X").unlockedBy("has_leather", VanillaRecipeProvider.has(Items.LEATHER)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.MISC, Items.LEATHER_HORSE_ARMOR).define(Character.valueOf((char)'X'), Items.LEATHER).pattern("X X").pattern("XXX").pattern("X X").unlockedBy("has_leather", VanillaRecipeProvider.has(Items.LEATHER)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.LECTERN).define(Character.valueOf((char)'S'), ItemTags.WOODEN_SLABS).define(Character.valueOf((char)'B'), Blocks.BOOKSHELF).pattern("SSS").pattern(" B ").pattern(" S ").unlockedBy("has_book", VanillaRecipeProvider.has(Items.BOOK)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.LEVER).define(Character.valueOf((char)'#'), Blocks.COBBLESTONE).define(Character.valueOf((char)'X'), Items.STICK).pattern("X").pattern("#").unlockedBy("has_cobblestone", VanillaRecipeProvider.has(Blocks.COBBLESTONE)).save($$0);
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.LIGHT_BLUE_DYE, Blocks.BLUE_ORCHID, "light_blue_dye");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.LIGHT_BLUE_DYE, 2).requires(Items.BLUE_DYE).requires(Items.WHITE_DYE).group("light_blue_dye").unlockedBy("has_blue_dye", VanillaRecipeProvider.has(Items.BLUE_DYE)).unlockedBy("has_white_dye", VanillaRecipeProvider.has(Items.WHITE_DYE)).save($$0, "light_blue_dye_from_blue_white_dye");
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.LIGHT_GRAY_DYE, Blocks.AZURE_BLUET, "light_gray_dye");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.LIGHT_GRAY_DYE, 2).requires(Items.GRAY_DYE).requires(Items.WHITE_DYE).group("light_gray_dye").unlockedBy("has_gray_dye", VanillaRecipeProvider.has(Items.GRAY_DYE)).unlockedBy("has_white_dye", VanillaRecipeProvider.has(Items.WHITE_DYE)).save($$0, "light_gray_dye_from_gray_white_dye");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.LIGHT_GRAY_DYE, 3).requires(Items.BLACK_DYE).requires(Items.WHITE_DYE, 2).group("light_gray_dye").unlockedBy("has_white_dye", VanillaRecipeProvider.has(Items.WHITE_DYE)).unlockedBy("has_black_dye", VanillaRecipeProvider.has(Items.BLACK_DYE)).save($$0, "light_gray_dye_from_black_white_dye");
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.LIGHT_GRAY_DYE, Blocks.OXEYE_DAISY, "light_gray_dye");
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.LIGHT_GRAY_DYE, Blocks.WHITE_TULIP, "light_gray_dye");
        VanillaRecipeProvider.pressurePlate($$0, Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE, Items.GOLD_INGOT);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.LIGHTNING_ROD).define(Character.valueOf((char)'#'), Items.COPPER_INGOT).pattern("#").pattern("#").pattern("#").unlockedBy("has_copper_ingot", VanillaRecipeProvider.has(Items.COPPER_INGOT)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.LIME_DYE, 2).requires(Items.GREEN_DYE).requires(Items.WHITE_DYE).unlockedBy("has_green_dye", VanillaRecipeProvider.has(Items.GREEN_DYE)).unlockedBy("has_white_dye", VanillaRecipeProvider.has(Items.WHITE_DYE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.JACK_O_LANTERN).define(Character.valueOf((char)'A'), Blocks.CARVED_PUMPKIN).define(Character.valueOf((char)'B'), Blocks.TORCH).pattern("A").pattern("B").unlockedBy("has_carved_pumpkin", VanillaRecipeProvider.has(Blocks.CARVED_PUMPKIN)).save($$0);
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.MAGENTA_DYE, Blocks.ALLIUM, "magenta_dye");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.MAGENTA_DYE, 4).requires(Items.BLUE_DYE).requires(Items.RED_DYE, 2).requires(Items.WHITE_DYE).group("magenta_dye").unlockedBy("has_blue_dye", VanillaRecipeProvider.has(Items.BLUE_DYE)).unlockedBy("has_rose_red", VanillaRecipeProvider.has(Items.RED_DYE)).unlockedBy("has_white_dye", VanillaRecipeProvider.has(Items.WHITE_DYE)).save($$0, "magenta_dye_from_blue_red_white_dye");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.MAGENTA_DYE, 3).requires(Items.BLUE_DYE).requires(Items.RED_DYE).requires(Items.PINK_DYE).group("magenta_dye").unlockedBy("has_pink_dye", VanillaRecipeProvider.has(Items.PINK_DYE)).unlockedBy("has_blue_dye", VanillaRecipeProvider.has(Items.BLUE_DYE)).unlockedBy("has_red_dye", VanillaRecipeProvider.has(Items.RED_DYE)).save($$0, "magenta_dye_from_blue_red_pink");
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.MAGENTA_DYE, Blocks.LILAC, "magenta_dye", 2);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.MAGENTA_DYE, 2).requires(Items.PURPLE_DYE).requires(Items.PINK_DYE).group("magenta_dye").unlockedBy("has_pink_dye", VanillaRecipeProvider.has(Items.PINK_DYE)).unlockedBy("has_purple_dye", VanillaRecipeProvider.has(Items.PURPLE_DYE)).save($$0, "magenta_dye_from_purple_and_pink");
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.MAGMA_BLOCK, Items.MAGMA_CREAM);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BREWING, Items.MAGMA_CREAM).requires(Items.BLAZE_POWDER).requires(Items.SLIME_BALL).unlockedBy("has_blaze_powder", VanillaRecipeProvider.has(Items.BLAZE_POWDER)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.MISC, Items.MAP).define(Character.valueOf((char)'#'), Items.PAPER).define(Character.valueOf((char)'X'), Items.COMPASS).pattern("###").pattern("#X#").pattern("###").unlockedBy("has_compass", VanillaRecipeProvider.has(Items.COMPASS)).save($$0);
        VanillaRecipeProvider.threeByThreePacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.MELON, Items.MELON_SLICE, "has_melon");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.MELON_SEEDS).requires(Items.MELON_SLICE).unlockedBy("has_melon", VanillaRecipeProvider.has(Items.MELON_SLICE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TRANSPORTATION, Items.MINECART).define(Character.valueOf((char)'#'), Items.IRON_INGOT).pattern("# #").pattern("###").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, Blocks.MOSSY_COBBLESTONE).requires(Blocks.COBBLESTONE).requires(Blocks.VINE).group("mossy_cobblestone").unlockedBy("has_vine", VanillaRecipeProvider.has(Blocks.VINE)).save($$0, VanillaRecipeProvider.getConversionRecipeName(Blocks.MOSSY_COBBLESTONE, Blocks.VINE));
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, Blocks.MOSSY_STONE_BRICKS).requires(Blocks.STONE_BRICKS).requires(Blocks.VINE).group("mossy_stone_bricks").unlockedBy("has_vine", VanillaRecipeProvider.has(Blocks.VINE)).save($$0, VanillaRecipeProvider.getConversionRecipeName(Blocks.MOSSY_STONE_BRICKS, Blocks.VINE));
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, Blocks.MOSSY_COBBLESTONE).requires(Blocks.COBBLESTONE).requires(Blocks.MOSS_BLOCK).group("mossy_cobblestone").unlockedBy("has_moss_block", VanillaRecipeProvider.has(Blocks.MOSS_BLOCK)).save($$0, VanillaRecipeProvider.getConversionRecipeName(Blocks.MOSSY_COBBLESTONE, Blocks.MOSS_BLOCK));
        ShapelessRecipeBuilder.shapeless(RecipeCategory.BUILDING_BLOCKS, Blocks.MOSSY_STONE_BRICKS).requires(Blocks.STONE_BRICKS).requires(Blocks.MOSS_BLOCK).group("mossy_stone_bricks").unlockedBy("has_moss_block", VanillaRecipeProvider.has(Blocks.MOSS_BLOCK)).save($$0, VanillaRecipeProvider.getConversionRecipeName(Blocks.MOSSY_STONE_BRICKS, Blocks.MOSS_BLOCK));
        ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, Items.MUSHROOM_STEW).requires(Blocks.BROWN_MUSHROOM).requires(Blocks.RED_MUSHROOM).requires(Items.BOWL).unlockedBy("has_mushroom_stew", VanillaRecipeProvider.has(Items.MUSHROOM_STEW)).unlockedBy("has_bowl", VanillaRecipeProvider.has(Items.BOWL)).unlockedBy("has_brown_mushroom", VanillaRecipeProvider.has(Blocks.BROWN_MUSHROOM)).unlockedBy("has_red_mushroom", VanillaRecipeProvider.has(Blocks.RED_MUSHROOM)).save($$0);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.NETHER_BRICKS, Items.NETHER_BRICK);
        VanillaRecipeProvider.threeByThreePacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.NETHER_WART_BLOCK, Items.NETHER_WART);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.NOTE_BLOCK).define(Character.valueOf((char)'#'), ItemTags.PLANKS).define(Character.valueOf((char)'X'), Items.REDSTONE).pattern("###").pattern("#X#").pattern("###").unlockedBy("has_redstone", VanillaRecipeProvider.has(Items.REDSTONE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.OBSERVER).define(Character.valueOf((char)'Q'), Items.QUARTZ).define(Character.valueOf((char)'R'), Items.REDSTONE).define(Character.valueOf((char)'#'), Blocks.COBBLESTONE).pattern("###").pattern("RRQ").pattern("###").unlockedBy("has_quartz", VanillaRecipeProvider.has(Items.QUARTZ)).save($$0);
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.ORANGE_DYE, Blocks.ORANGE_TULIP, "orange_dye");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.ORANGE_DYE, 2).requires(Items.RED_DYE).requires(Items.YELLOW_DYE).group("orange_dye").unlockedBy("has_red_dye", VanillaRecipeProvider.has(Items.RED_DYE)).unlockedBy("has_yellow_dye", VanillaRecipeProvider.has(Items.YELLOW_DYE)).save($$0, "orange_dye_from_red_yellow");
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Items.PAINTING).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Ingredient.of(ItemTags.WOOL)).pattern("###").pattern("#X#").pattern("###").unlockedBy("has_wool", VanillaRecipeProvider.has(ItemTags.WOOL)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.MISC, Items.PAPER, 3).define(Character.valueOf((char)'#'), Blocks.SUGAR_CANE).pattern("###").unlockedBy("has_reeds", VanillaRecipeProvider.has(Blocks.SUGAR_CANE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.QUARTZ_PILLAR, 2).define(Character.valueOf((char)'#'), Blocks.QUARTZ_BLOCK).pattern("#").pattern("#").unlockedBy("has_chiseled_quartz_block", VanillaRecipeProvider.has(Blocks.CHISELED_QUARTZ_BLOCK)).unlockedBy("has_quartz_block", VanillaRecipeProvider.has(Blocks.QUARTZ_BLOCK)).unlockedBy("has_quartz_pillar", VanillaRecipeProvider.has(Blocks.QUARTZ_PILLAR)).save($$0);
        VanillaRecipeProvider.threeByThreePacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.PACKED_ICE, Blocks.ICE);
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.PINK_DYE, Blocks.PEONY, "pink_dye", 2);
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.PINK_DYE, Blocks.PINK_TULIP, "pink_dye");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.PINK_DYE, 2).requires(Items.RED_DYE).requires(Items.WHITE_DYE).group("pink_dye").unlockedBy("has_white_dye", VanillaRecipeProvider.has(Items.WHITE_DYE)).unlockedBy("has_red_dye", VanillaRecipeProvider.has(Items.RED_DYE)).save($$0, "pink_dye_from_red_white_dye");
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.PISTON).define(Character.valueOf((char)'R'), Items.REDSTONE).define(Character.valueOf((char)'#'), Blocks.COBBLESTONE).define(Character.valueOf((char)'T'), ItemTags.PLANKS).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("TTT").pattern("#X#").pattern("#R#").unlockedBy("has_redstone", VanillaRecipeProvider.has(Items.REDSTONE)).save($$0);
        VanillaRecipeProvider.polished($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BASALT, Blocks.BASALT);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.PRISMARINE, Items.PRISMARINE_SHARD);
        VanillaRecipeProvider.threeByThreePacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.PRISMARINE_BRICKS, Items.PRISMARINE_SHARD);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, Items.PUMPKIN_PIE).requires(Blocks.PUMPKIN).requires(Items.SUGAR).requires(Items.EGG).unlockedBy("has_carved_pumpkin", VanillaRecipeProvider.has(Blocks.CARVED_PUMPKIN)).unlockedBy("has_pumpkin", VanillaRecipeProvider.has(Blocks.PUMPKIN)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.PUMPKIN_SEEDS, 4).requires(Blocks.PUMPKIN).unlockedBy("has_pumpkin", VanillaRecipeProvider.has(Blocks.PUMPKIN)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.PURPLE_DYE, 2).requires(Items.BLUE_DYE).requires(Items.RED_DYE).unlockedBy("has_blue_dye", VanillaRecipeProvider.has(Items.BLUE_DYE)).unlockedBy("has_red_dye", VanillaRecipeProvider.has(Items.RED_DYE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.SHULKER_BOX).define(Character.valueOf((char)'#'), Blocks.CHEST).define(Character.valueOf((char)'-'), Items.SHULKER_SHELL).pattern("-").pattern("#").pattern("-").unlockedBy("has_shulker_shell", VanillaRecipeProvider.has(Items.SHULKER_SHELL)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.PURPUR_BLOCK, 4).define(Character.valueOf((char)'F'), Items.POPPED_CHORUS_FRUIT).pattern("FF").pattern("FF").unlockedBy("has_chorus_fruit_popped", VanillaRecipeProvider.has(Items.POPPED_CHORUS_FRUIT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.PURPUR_PILLAR).define(Character.valueOf((char)'#'), Blocks.PURPUR_SLAB).pattern("#").pattern("#").unlockedBy("has_purpur_block", VanillaRecipeProvider.has(Blocks.PURPUR_BLOCK)).save($$0);
        VanillaRecipeProvider.slabBuilder(RecipeCategory.BUILDING_BLOCKS, Blocks.PURPUR_SLAB, Ingredient.of(Blocks.PURPUR_BLOCK, Blocks.PURPUR_PILLAR)).unlockedBy("has_purpur_block", VanillaRecipeProvider.has(Blocks.PURPUR_BLOCK)).save($$0);
        VanillaRecipeProvider.stairBuilder(Blocks.PURPUR_STAIRS, Ingredient.of(Blocks.PURPUR_BLOCK, Blocks.PURPUR_PILLAR)).unlockedBy("has_purpur_block", VanillaRecipeProvider.has(Blocks.PURPUR_BLOCK)).save($$0);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.QUARTZ_BLOCK, Items.QUARTZ);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.QUARTZ_BRICKS, 4).define(Character.valueOf((char)'#'), Blocks.QUARTZ_BLOCK).pattern("##").pattern("##").unlockedBy("has_quartz_block", VanillaRecipeProvider.has(Blocks.QUARTZ_BLOCK)).save($$0);
        VanillaRecipeProvider.slabBuilder(RecipeCategory.BUILDING_BLOCKS, Blocks.QUARTZ_SLAB, Ingredient.of(Blocks.CHISELED_QUARTZ_BLOCK, Blocks.QUARTZ_BLOCK, Blocks.QUARTZ_PILLAR)).unlockedBy("has_chiseled_quartz_block", VanillaRecipeProvider.has(Blocks.CHISELED_QUARTZ_BLOCK)).unlockedBy("has_quartz_block", VanillaRecipeProvider.has(Blocks.QUARTZ_BLOCK)).unlockedBy("has_quartz_pillar", VanillaRecipeProvider.has(Blocks.QUARTZ_PILLAR)).save($$0);
        VanillaRecipeProvider.stairBuilder(Blocks.QUARTZ_STAIRS, Ingredient.of(Blocks.CHISELED_QUARTZ_BLOCK, Blocks.QUARTZ_BLOCK, Blocks.QUARTZ_PILLAR)).unlockedBy("has_chiseled_quartz_block", VanillaRecipeProvider.has(Blocks.CHISELED_QUARTZ_BLOCK)).unlockedBy("has_quartz_block", VanillaRecipeProvider.has(Blocks.QUARTZ_BLOCK)).unlockedBy("has_quartz_pillar", VanillaRecipeProvider.has(Blocks.QUARTZ_PILLAR)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, Items.RABBIT_STEW).requires(Items.BAKED_POTATO).requires(Items.COOKED_RABBIT).requires(Items.BOWL).requires(Items.CARROT).requires(Blocks.BROWN_MUSHROOM).group("rabbit_stew").unlockedBy("has_cooked_rabbit", VanillaRecipeProvider.has(Items.COOKED_RABBIT)).save($$0, VanillaRecipeProvider.getConversionRecipeName(Items.RABBIT_STEW, Items.BROWN_MUSHROOM));
        ShapelessRecipeBuilder.shapeless(RecipeCategory.FOOD, Items.RABBIT_STEW).requires(Items.BAKED_POTATO).requires(Items.COOKED_RABBIT).requires(Items.BOWL).requires(Items.CARROT).requires(Blocks.RED_MUSHROOM).group("rabbit_stew").unlockedBy("has_cooked_rabbit", VanillaRecipeProvider.has(Items.COOKED_RABBIT)).save($$0, VanillaRecipeProvider.getConversionRecipeName(Items.RABBIT_STEW, Items.RED_MUSHROOM));
        ShapedRecipeBuilder.shaped(RecipeCategory.TRANSPORTATION, Blocks.RAIL, 16).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.IRON_INGOT).pattern("X X").pattern("X#X").pattern("X X").unlockedBy("has_minecart", VanillaRecipeProvider.has(Items.MINECART)).save($$0);
        VanillaRecipeProvider.nineBlockStorageRecipes($$0, RecipeCategory.REDSTONE, Items.REDSTONE, RecipeCategory.REDSTONE, Items.REDSTONE_BLOCK);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.REDSTONE_LAMP).define(Character.valueOf((char)'R'), Items.REDSTONE).define(Character.valueOf((char)'G'), Blocks.GLOWSTONE).pattern(" R ").pattern("RGR").pattern(" R ").unlockedBy("has_glowstone", VanillaRecipeProvider.has(Blocks.GLOWSTONE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.REDSTONE_TORCH).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Items.REDSTONE).pattern("X").pattern("#").unlockedBy("has_redstone", VanillaRecipeProvider.has(Items.REDSTONE)).save($$0);
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.RED_DYE, Items.BEETROOT, "red_dye");
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.RED_DYE, Blocks.POPPY, "red_dye");
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.RED_DYE, Blocks.ROSE_BUSH, "red_dye", 2);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.RED_DYE).requires(Blocks.RED_TULIP).group("red_dye").unlockedBy("has_red_flower", VanillaRecipeProvider.has(Blocks.RED_TULIP)).save($$0, "red_dye_from_tulip");
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.RED_NETHER_BRICKS).define(Character.valueOf((char)'W'), Items.NETHER_WART).define(Character.valueOf((char)'N'), Items.NETHER_BRICK).pattern("NW").pattern("WN").unlockedBy("has_nether_wart", VanillaRecipeProvider.has(Items.NETHER_WART)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.RED_SANDSTONE).define(Character.valueOf((char)'#'), Blocks.RED_SAND).pattern("##").pattern("##").unlockedBy("has_sand", VanillaRecipeProvider.has(Blocks.RED_SAND)).save($$0);
        VanillaRecipeProvider.slabBuilder(RecipeCategory.BUILDING_BLOCKS, Blocks.RED_SANDSTONE_SLAB, Ingredient.of(Blocks.RED_SANDSTONE, Blocks.CHISELED_RED_SANDSTONE)).unlockedBy("has_red_sandstone", VanillaRecipeProvider.has(Blocks.RED_SANDSTONE)).unlockedBy("has_chiseled_red_sandstone", VanillaRecipeProvider.has(Blocks.CHISELED_RED_SANDSTONE)).save($$0);
        VanillaRecipeProvider.stairBuilder(Blocks.RED_SANDSTONE_STAIRS, Ingredient.of(Blocks.RED_SANDSTONE, Blocks.CHISELED_RED_SANDSTONE, Blocks.CUT_RED_SANDSTONE)).unlockedBy("has_red_sandstone", VanillaRecipeProvider.has(Blocks.RED_SANDSTONE)).unlockedBy("has_chiseled_red_sandstone", VanillaRecipeProvider.has(Blocks.CHISELED_RED_SANDSTONE)).unlockedBy("has_cut_red_sandstone", VanillaRecipeProvider.has(Blocks.CUT_RED_SANDSTONE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.REPEATER).define(Character.valueOf((char)'#'), Blocks.REDSTONE_TORCH).define(Character.valueOf((char)'X'), Items.REDSTONE).define(Character.valueOf((char)'I'), Blocks.STONE).pattern("#X#").pattern("III").unlockedBy("has_redstone_torch", VanillaRecipeProvider.has(Blocks.REDSTONE_TORCH)).save($$0);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SANDSTONE, Blocks.SAND);
        VanillaRecipeProvider.slabBuilder(RecipeCategory.BUILDING_BLOCKS, Blocks.SANDSTONE_SLAB, Ingredient.of(Blocks.SANDSTONE, Blocks.CHISELED_SANDSTONE)).unlockedBy("has_sandstone", VanillaRecipeProvider.has(Blocks.SANDSTONE)).unlockedBy("has_chiseled_sandstone", VanillaRecipeProvider.has(Blocks.CHISELED_SANDSTONE)).save($$0);
        VanillaRecipeProvider.stairBuilder(Blocks.SANDSTONE_STAIRS, Ingredient.of(Blocks.SANDSTONE, Blocks.CHISELED_SANDSTONE, Blocks.CUT_SANDSTONE)).unlockedBy("has_sandstone", VanillaRecipeProvider.has(Blocks.SANDSTONE)).unlockedBy("has_chiseled_sandstone", VanillaRecipeProvider.has(Blocks.CHISELED_SANDSTONE)).unlockedBy("has_cut_sandstone", VanillaRecipeProvider.has(Blocks.CUT_SANDSTONE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.SEA_LANTERN).define(Character.valueOf((char)'S'), Items.PRISMARINE_SHARD).define(Character.valueOf((char)'C'), Items.PRISMARINE_CRYSTALS).pattern("SCS").pattern("CCC").pattern("SCS").unlockedBy("has_prismarine_crystals", VanillaRecipeProvider.has(Items.PRISMARINE_CRYSTALS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.SHEARS).define(Character.valueOf((char)'#'), Items.IRON_INGOT).pattern(" #").pattern("# ").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.SHIELD).define(Character.valueOf((char)'W'), ItemTags.PLANKS).define(Character.valueOf((char)'o'), Items.IRON_INGOT).pattern("WoW").pattern("WWW").pattern(" W ").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        VanillaRecipeProvider.nineBlockStorageRecipes($$0, RecipeCategory.MISC, Items.SLIME_BALL, RecipeCategory.REDSTONE, Items.SLIME_BLOCK);
        VanillaRecipeProvider.cut($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_RED_SANDSTONE, Blocks.RED_SANDSTONE);
        VanillaRecipeProvider.cut($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_SANDSTONE, Blocks.SANDSTONE);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SNOW_BLOCK, Items.SNOWBALL);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.SNOW, 6).define(Character.valueOf((char)'#'), Blocks.SNOW_BLOCK).pattern("###").unlockedBy("has_snowball", VanillaRecipeProvider.has(Items.SNOWBALL)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.SOUL_CAMPFIRE).define(Character.valueOf((char)'L'), ItemTags.LOGS).define(Character.valueOf((char)'S'), Items.STICK).define(Character.valueOf((char)'#'), ItemTags.SOUL_FIRE_BASE_BLOCKS).pattern(" S ").pattern("S#S").pattern("LLL").unlockedBy("has_stick", VanillaRecipeProvider.has(Items.STICK)).unlockedBy("has_soul_sand", VanillaRecipeProvider.has(ItemTags.SOUL_FIRE_BASE_BLOCKS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BREWING, Items.GLISTERING_MELON_SLICE).define(Character.valueOf((char)'#'), Items.GOLD_NUGGET).define(Character.valueOf((char)'X'), Items.MELON_SLICE).pattern("###").pattern("#X#").pattern("###").unlockedBy("has_melon", VanillaRecipeProvider.has(Items.MELON_SLICE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.SPECTRAL_ARROW, 2).define(Character.valueOf((char)'#'), Items.GLOWSTONE_DUST).define(Character.valueOf((char)'X'), Items.ARROW).pattern(" # ").pattern("#X#").pattern(" # ").unlockedBy("has_glowstone_dust", VanillaRecipeProvider.has(Items.GLOWSTONE_DUST)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.SPYGLASS).define(Character.valueOf((char)'#'), Items.AMETHYST_SHARD).define(Character.valueOf((char)'X'), Items.COPPER_INGOT).pattern(" # ").pattern(" X ").pattern(" X ").unlockedBy("has_amethyst_shard", VanillaRecipeProvider.has(Items.AMETHYST_SHARD)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.MISC, Items.STICK, 4).define(Character.valueOf((char)'#'), ItemTags.PLANKS).pattern("#").pattern("#").group("sticks").unlockedBy("has_planks", VanillaRecipeProvider.has(ItemTags.PLANKS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.MISC, Items.STICK, 1).define(Character.valueOf((char)'#'), Blocks.BAMBOO).pattern("#").pattern("#").group("sticks").unlockedBy("has_bamboo", VanillaRecipeProvider.has(Blocks.BAMBOO)).save($$0, "stick_from_bamboo_item");
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.STICKY_PISTON).define(Character.valueOf((char)'P'), Blocks.PISTON).define(Character.valueOf((char)'S'), Items.SLIME_BALL).pattern("S").pattern("P").unlockedBy("has_slime_ball", VanillaRecipeProvider.has(Items.SLIME_BALL)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.STONE_BRICKS, 4).define(Character.valueOf((char)'#'), Blocks.STONE).pattern("##").pattern("##").unlockedBy("has_stone", VanillaRecipeProvider.has(Blocks.STONE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.STONE_AXE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), ItemTags.STONE_TOOL_MATERIALS).pattern("XX").pattern("X#").pattern(" #").unlockedBy("has_cobblestone", VanillaRecipeProvider.has(ItemTags.STONE_TOOL_MATERIALS)).save($$0);
        VanillaRecipeProvider.slabBuilder(RecipeCategory.BUILDING_BLOCKS, Blocks.STONE_BRICK_SLAB, Ingredient.of(Blocks.STONE_BRICKS)).unlockedBy("has_stone_bricks", VanillaRecipeProvider.has(ItemTags.STONE_BRICKS)).save($$0);
        VanillaRecipeProvider.stairBuilder(Blocks.STONE_BRICK_STAIRS, Ingredient.of(Blocks.STONE_BRICKS)).unlockedBy("has_stone_bricks", VanillaRecipeProvider.has(ItemTags.STONE_BRICKS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.STONE_HOE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), ItemTags.STONE_TOOL_MATERIALS).pattern("XX").pattern(" #").pattern(" #").unlockedBy("has_cobblestone", VanillaRecipeProvider.has(ItemTags.STONE_TOOL_MATERIALS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.STONE_PICKAXE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), ItemTags.STONE_TOOL_MATERIALS).pattern("XXX").pattern(" # ").pattern(" # ").unlockedBy("has_cobblestone", VanillaRecipeProvider.has(ItemTags.STONE_TOOL_MATERIALS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.STONE_SHOVEL).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), ItemTags.STONE_TOOL_MATERIALS).pattern("X").pattern("#").pattern("#").unlockedBy("has_cobblestone", VanillaRecipeProvider.has(ItemTags.STONE_TOOL_MATERIALS)).save($$0);
        VanillaRecipeProvider.slab($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_STONE_SLAB, Blocks.SMOOTH_STONE);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.STONE_SWORD).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), ItemTags.STONE_TOOL_MATERIALS).pattern("X").pattern("X").pattern("#").unlockedBy("has_cobblestone", VanillaRecipeProvider.has(ItemTags.STONE_TOOL_MATERIALS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.WHITE_WOOL).define(Character.valueOf((char)'#'), Items.STRING).pattern("##").pattern("##").unlockedBy("has_string", VanillaRecipeProvider.has(Items.STRING)).save($$0, VanillaRecipeProvider.getConversionRecipeName(Blocks.WHITE_WOOL, Items.STRING));
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.SUGAR, Blocks.SUGAR_CANE, "sugar");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.SUGAR, 3).requires(Items.HONEY_BOTTLE).group("sugar").unlockedBy("has_honey_bottle", VanillaRecipeProvider.has(Items.HONEY_BOTTLE)).save($$0, VanillaRecipeProvider.getConversionRecipeName(Items.SUGAR, Items.HONEY_BOTTLE));
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.TARGET).define(Character.valueOf((char)'H'), Items.HAY_BLOCK).define(Character.valueOf((char)'R'), Items.REDSTONE).pattern(" R ").pattern("RHR").pattern(" R ").unlockedBy("has_redstone", VanillaRecipeProvider.has(Items.REDSTONE)).unlockedBy("has_hay_block", VanillaRecipeProvider.has(Blocks.HAY_BLOCK)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.TNT).define(Character.valueOf((char)'#'), Ingredient.of(Blocks.SAND, Blocks.RED_SAND)).define(Character.valueOf((char)'X'), Items.GUNPOWDER).pattern("X#X").pattern("#X#").pattern("X#X").unlockedBy("has_gunpowder", VanillaRecipeProvider.has(Items.GUNPOWDER)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.TRANSPORTATION, Items.TNT_MINECART).requires(Blocks.TNT).requires(Items.MINECART).unlockedBy("has_minecart", VanillaRecipeProvider.has(Items.MINECART)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.TORCH, 4).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), Ingredient.of(Items.COAL, Items.CHARCOAL)).pattern("X").pattern("#").unlockedBy("has_stone_pickaxe", VanillaRecipeProvider.has(Items.STONE_PICKAXE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.SOUL_TORCH, 4).define(Character.valueOf((char)'X'), Ingredient.of(Items.COAL, Items.CHARCOAL)).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'S'), ItemTags.SOUL_FIRE_BASE_BLOCKS).pattern("X").pattern("#").pattern("S").unlockedBy("has_soul_sand", VanillaRecipeProvider.has(ItemTags.SOUL_FIRE_BASE_BLOCKS)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.LANTERN).define(Character.valueOf((char)'#'), Items.TORCH).define(Character.valueOf((char)'X'), Items.IRON_NUGGET).pattern("XXX").pattern("X#X").pattern("XXX").unlockedBy("has_iron_nugget", VanillaRecipeProvider.has(Items.IRON_NUGGET)).unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.SOUL_LANTERN).define(Character.valueOf((char)'#'), Items.SOUL_TORCH).define(Character.valueOf((char)'X'), Items.IRON_NUGGET).pattern("XXX").pattern("X#X").pattern("XXX").unlockedBy("has_soul_torch", VanillaRecipeProvider.has(Items.SOUL_TORCH)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.REDSTONE, Blocks.TRAPPED_CHEST).requires(Blocks.CHEST).requires(Blocks.TRIPWIRE_HOOK).unlockedBy("has_tripwire_hook", VanillaRecipeProvider.has(Blocks.TRIPWIRE_HOOK)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.REDSTONE, Blocks.TRIPWIRE_HOOK, 2).define(Character.valueOf((char)'#'), ItemTags.PLANKS).define(Character.valueOf((char)'S'), Items.STICK).define(Character.valueOf((char)'I'), Items.IRON_INGOT).pattern("I").pattern("S").pattern("#").unlockedBy("has_string", VanillaRecipeProvider.has(Items.STRING)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.TURTLE_HELMET).define(Character.valueOf((char)'X'), Items.SCUTE).pattern("XXX").pattern("X X").unlockedBy("has_scute", VanillaRecipeProvider.has(Items.SCUTE)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.WHEAT, 9).requires(Blocks.HAY_BLOCK).unlockedBy("has_hay_block", VanillaRecipeProvider.has(Blocks.HAY_BLOCK)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.WHITE_DYE).requires(Items.BONE_MEAL).group("white_dye").unlockedBy("has_bone_meal", VanillaRecipeProvider.has(Items.BONE_MEAL)).save($$0);
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.WHITE_DYE, Blocks.LILY_OF_THE_VALLEY, "white_dye");
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.WOODEN_AXE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), ItemTags.PLANKS).pattern("XX").pattern("X#").pattern(" #").unlockedBy("has_stick", VanillaRecipeProvider.has(Items.STICK)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.WOODEN_HOE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), ItemTags.PLANKS).pattern("XX").pattern(" #").pattern(" #").unlockedBy("has_stick", VanillaRecipeProvider.has(Items.STICK)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.WOODEN_PICKAXE).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), ItemTags.PLANKS).pattern("XXX").pattern(" # ").pattern(" # ").unlockedBy("has_stick", VanillaRecipeProvider.has(Items.STICK)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.WOODEN_SHOVEL).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), ItemTags.PLANKS).pattern("X").pattern("#").pattern("#").unlockedBy("has_stick", VanillaRecipeProvider.has(Items.STICK)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.COMBAT, Items.WOODEN_SWORD).define(Character.valueOf((char)'#'), Items.STICK).define(Character.valueOf((char)'X'), ItemTags.PLANKS).pattern("X").pattern("X").pattern("#").unlockedBy("has_stick", VanillaRecipeProvider.has(Items.STICK)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.WRITABLE_BOOK).requires(Items.BOOK).requires(Items.INK_SAC).requires(Items.FEATHER).unlockedBy("has_book", VanillaRecipeProvider.has(Items.BOOK)).save($$0);
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.YELLOW_DYE, Blocks.DANDELION, "yellow_dye");
        VanillaRecipeProvider.oneToOneConversionRecipe($$0, Items.YELLOW_DYE, Blocks.SUNFLOWER, "yellow_dye", 2);
        VanillaRecipeProvider.nineBlockStorageRecipes($$0, RecipeCategory.FOOD, Items.DRIED_KELP, RecipeCategory.BUILDING_BLOCKS, Items.DRIED_KELP_BLOCK);
        ShapedRecipeBuilder.shaped(RecipeCategory.MISC, Blocks.CONDUIT).define(Character.valueOf((char)'#'), Items.NAUTILUS_SHELL).define(Character.valueOf((char)'X'), Items.HEART_OF_THE_SEA).pattern("###").pattern("#X#").pattern("###").unlockedBy("has_nautilus_core", VanillaRecipeProvider.has(Items.HEART_OF_THE_SEA)).unlockedBy("has_nautilus_shell", VanillaRecipeProvider.has(Items.NAUTILUS_SHELL)).save($$0);
        VanillaRecipeProvider.wall($$0, RecipeCategory.DECORATIONS, Blocks.RED_SANDSTONE_WALL, Blocks.RED_SANDSTONE);
        VanillaRecipeProvider.wall($$0, RecipeCategory.DECORATIONS, Blocks.STONE_BRICK_WALL, Blocks.STONE_BRICKS);
        VanillaRecipeProvider.wall($$0, RecipeCategory.DECORATIONS, Blocks.SANDSTONE_WALL, Blocks.SANDSTONE);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.CREEPER_BANNER_PATTERN).requires(Items.PAPER).requires(Items.CREEPER_HEAD).unlockedBy("has_creeper_head", VanillaRecipeProvider.has(Items.CREEPER_HEAD)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.SKULL_BANNER_PATTERN).requires(Items.PAPER).requires(Items.WITHER_SKELETON_SKULL).unlockedBy("has_wither_skeleton_skull", VanillaRecipeProvider.has(Items.WITHER_SKELETON_SKULL)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.FLOWER_BANNER_PATTERN).requires(Items.PAPER).requires(Blocks.OXEYE_DAISY).unlockedBy("has_oxeye_daisy", VanillaRecipeProvider.has(Blocks.OXEYE_DAISY)).save($$0);
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.MOJANG_BANNER_PATTERN).requires(Items.PAPER).requires(Items.ENCHANTED_GOLDEN_APPLE).unlockedBy("has_enchanted_golden_apple", VanillaRecipeProvider.has(Items.ENCHANTED_GOLDEN_APPLE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.SCAFFOLDING, 6).define(Character.valueOf((char)'~'), Items.STRING).define(Character.valueOf((char)'I'), Blocks.BAMBOO).pattern("I~I").pattern("I I").pattern("I I").unlockedBy("has_bamboo", VanillaRecipeProvider.has(Blocks.BAMBOO)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.GRINDSTONE).define(Character.valueOf((char)'I'), Items.STICK).define(Character.valueOf((char)'-'), Blocks.STONE_SLAB).define(Character.valueOf((char)'#'), ItemTags.PLANKS).pattern("I-I").pattern("# #").unlockedBy("has_stone_slab", VanillaRecipeProvider.has(Blocks.STONE_SLAB)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.BLAST_FURNACE).define(Character.valueOf((char)'#'), Blocks.SMOOTH_STONE).define(Character.valueOf((char)'X'), Blocks.FURNACE).define(Character.valueOf((char)'I'), Items.IRON_INGOT).pattern("III").pattern("IXI").pattern("###").unlockedBy("has_smooth_stone", VanillaRecipeProvider.has(Blocks.SMOOTH_STONE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.SMOKER).define(Character.valueOf((char)'#'), ItemTags.LOGS).define(Character.valueOf((char)'X'), Blocks.FURNACE).pattern(" # ").pattern("#X#").pattern(" # ").unlockedBy("has_furnace", VanillaRecipeProvider.has(Blocks.FURNACE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.CARTOGRAPHY_TABLE).define(Character.valueOf((char)'#'), ItemTags.PLANKS).define(Character.valueOf((char)'@'), Items.PAPER).pattern("@@").pattern("##").pattern("##").unlockedBy("has_paper", VanillaRecipeProvider.has(Items.PAPER)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.SMITHING_TABLE).define(Character.valueOf((char)'#'), ItemTags.PLANKS).define(Character.valueOf((char)'@'), Items.IRON_INGOT).pattern("@@").pattern("##").pattern("##").unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.FLETCHING_TABLE).define(Character.valueOf((char)'#'), ItemTags.PLANKS).define(Character.valueOf((char)'@'), Items.FLINT).pattern("@@").pattern("##").pattern("##").unlockedBy("has_flint", VanillaRecipeProvider.has(Items.FLINT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.STONECUTTER).define(Character.valueOf((char)'I'), Items.IRON_INGOT).define(Character.valueOf((char)'#'), Blocks.STONE).pattern(" I ").pattern("###").unlockedBy("has_stone", VanillaRecipeProvider.has(Blocks.STONE)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.LODESTONE).define(Character.valueOf((char)'S'), Items.CHISELED_STONE_BRICKS).define(Character.valueOf((char)'#'), Items.NETHERITE_INGOT).pattern("SSS").pattern("S#S").pattern("SSS").unlockedBy("has_netherite_ingot", VanillaRecipeProvider.has(Items.NETHERITE_INGOT)).save($$0);
        VanillaRecipeProvider.nineBlockStorageRecipesRecipesWithCustomUnpacking($$0, RecipeCategory.MISC, Items.NETHERITE_INGOT, RecipeCategory.BUILDING_BLOCKS, Items.NETHERITE_BLOCK, "netherite_ingot_from_netherite_block", "netherite_ingot");
        ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, Items.NETHERITE_INGOT).requires(Items.NETHERITE_SCRAP, 4).requires(Items.GOLD_INGOT, 4).group("netherite_ingot").unlockedBy("has_netherite_scrap", VanillaRecipeProvider.has(Items.NETHERITE_SCRAP)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.RESPAWN_ANCHOR).define(Character.valueOf((char)'O'), Blocks.CRYING_OBSIDIAN).define(Character.valueOf((char)'G'), Blocks.GLOWSTONE).pattern("OOO").pattern("GGG").pattern("OOO").unlockedBy("has_obsidian", VanillaRecipeProvider.has(Blocks.CRYING_OBSIDIAN)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.DECORATIONS, Blocks.CHAIN).define(Character.valueOf((char)'I'), Items.IRON_INGOT).define(Character.valueOf((char)'N'), Items.IRON_NUGGET).pattern("N").pattern("I").pattern("N").unlockedBy("has_iron_nugget", VanillaRecipeProvider.has(Items.IRON_NUGGET)).unlockedBy("has_iron_ingot", VanillaRecipeProvider.has(Items.IRON_INGOT)).save($$0);
        ShapedRecipeBuilder.shaped(RecipeCategory.BUILDING_BLOCKS, Blocks.TINTED_GLASS, 2).define(Character.valueOf((char)'G'), Blocks.GLASS).define(Character.valueOf((char)'S'), Items.AMETHYST_SHARD).pattern(" S ").pattern("SGS").pattern(" S ").unlockedBy("has_amethyst_shard", VanillaRecipeProvider.has(Items.AMETHYST_SHARD)).save($$0);
        VanillaRecipeProvider.twoByTwoPacker($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.AMETHYST_BLOCK, Items.AMETHYST_SHARD);
        ShapedRecipeBuilder.shaped(RecipeCategory.TOOLS, Items.RECOVERY_COMPASS).define(Character.valueOf((char)'C'), Items.COMPASS).define(Character.valueOf((char)'S'), Items.ECHO_SHARD).pattern("SSS").pattern("SCS").pattern("SSS").unlockedBy("has_echo_shard", VanillaRecipeProvider.has(Items.ECHO_SHARD)).save($$0);
        VanillaRecipeProvider.threeByThreePacker($$0, RecipeCategory.MISC, Items.MUSIC_DISC_5, Items.DISC_FRAGMENT_5);
        SpecialRecipeBuilder.special(RecipeSerializer.ARMOR_DYE).save($$0, "armor_dye");
        SpecialRecipeBuilder.special(RecipeSerializer.BANNER_DUPLICATE).save($$0, "banner_duplicate");
        SpecialRecipeBuilder.special(RecipeSerializer.BOOK_CLONING).save($$0, "book_cloning");
        SpecialRecipeBuilder.special(RecipeSerializer.FIREWORK_ROCKET).save($$0, "firework_rocket");
        SpecialRecipeBuilder.special(RecipeSerializer.FIREWORK_STAR).save($$0, "firework_star");
        SpecialRecipeBuilder.special(RecipeSerializer.FIREWORK_STAR_FADE).save($$0, "firework_star_fade");
        SpecialRecipeBuilder.special(RecipeSerializer.MAP_CLONING).save($$0, "map_cloning");
        SpecialRecipeBuilder.special(RecipeSerializer.MAP_EXTENDING).save($$0, "map_extending");
        SpecialRecipeBuilder.special(RecipeSerializer.REPAIR_ITEM).save($$0, "repair_item");
        SpecialRecipeBuilder.special(RecipeSerializer.SHIELD_DECORATION).save($$0, "shield_decoration");
        SpecialRecipeBuilder.special(RecipeSerializer.SHULKER_BOX_COLORING).save($$0, "shulker_box_coloring");
        SpecialRecipeBuilder.special(RecipeSerializer.TIPPED_ARROW).save($$0, "tipped_arrow");
        SpecialRecipeBuilder.special(RecipeSerializer.SUSPICIOUS_STEW).save($$0, "suspicious_stew");
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.POTATO), RecipeCategory.FOOD, Items.BAKED_POTATO, 0.35f, 200).unlockedBy("has_potato", VanillaRecipeProvider.has(Items.POTATO)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.CLAY_BALL), RecipeCategory.MISC, Items.BRICK, 0.3f, 200).unlockedBy("has_clay_ball", VanillaRecipeProvider.has(Items.CLAY_BALL)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(ItemTags.LOGS_THAT_BURN), RecipeCategory.MISC, Items.CHARCOAL, 0.15f, 200).unlockedBy("has_log", VanillaRecipeProvider.has(ItemTags.LOGS_THAT_BURN)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.CHORUS_FRUIT), RecipeCategory.MISC, Items.POPPED_CHORUS_FRUIT, 0.1f, 200).unlockedBy("has_chorus_fruit", VanillaRecipeProvider.has(Items.CHORUS_FRUIT)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.BEEF), RecipeCategory.FOOD, Items.COOKED_BEEF, 0.35f, 200).unlockedBy("has_beef", VanillaRecipeProvider.has(Items.BEEF)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.CHICKEN), RecipeCategory.FOOD, Items.COOKED_CHICKEN, 0.35f, 200).unlockedBy("has_chicken", VanillaRecipeProvider.has(Items.CHICKEN)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.COD), RecipeCategory.FOOD, Items.COOKED_COD, 0.35f, 200).unlockedBy("has_cod", VanillaRecipeProvider.has(Items.COD)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.KELP), RecipeCategory.FOOD, Items.DRIED_KELP, 0.1f, 200).unlockedBy("has_kelp", VanillaRecipeProvider.has(Blocks.KELP)).save($$0, VanillaRecipeProvider.getSmeltingRecipeName(Items.DRIED_KELP));
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.SALMON), RecipeCategory.FOOD, Items.COOKED_SALMON, 0.35f, 200).unlockedBy("has_salmon", VanillaRecipeProvider.has(Items.SALMON)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.MUTTON), RecipeCategory.FOOD, Items.COOKED_MUTTON, 0.35f, 200).unlockedBy("has_mutton", VanillaRecipeProvider.has(Items.MUTTON)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.PORKCHOP), RecipeCategory.FOOD, Items.COOKED_PORKCHOP, 0.35f, 200).unlockedBy("has_porkchop", VanillaRecipeProvider.has(Items.PORKCHOP)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.RABBIT), RecipeCategory.FOOD, Items.COOKED_RABBIT, 0.35f, 200).unlockedBy("has_rabbit", VanillaRecipeProvider.has(Items.RABBIT)).save($$0);
        VanillaRecipeProvider.oreSmelting($$0, COAL_SMELTABLES, RecipeCategory.MISC, Items.COAL, 0.1f, 200, "coal");
        VanillaRecipeProvider.oreSmelting($$0, IRON_SMELTABLES, RecipeCategory.MISC, Items.IRON_INGOT, 0.7f, 200, "iron_ingot");
        VanillaRecipeProvider.oreSmelting($$0, COPPER_SMELTABLES, RecipeCategory.MISC, Items.COPPER_INGOT, 0.7f, 200, "copper_ingot");
        VanillaRecipeProvider.oreSmelting($$0, GOLD_SMELTABLES, RecipeCategory.MISC, Items.GOLD_INGOT, 1.0f, 200, "gold_ingot");
        VanillaRecipeProvider.oreSmelting($$0, DIAMOND_SMELTABLES, RecipeCategory.MISC, Items.DIAMOND, 1.0f, 200, "diamond");
        VanillaRecipeProvider.oreSmelting($$0, LAPIS_SMELTABLES, RecipeCategory.MISC, Items.LAPIS_LAZULI, 0.2f, 200, "lapis_lazuli");
        VanillaRecipeProvider.oreSmelting($$0, REDSTONE_SMELTABLES, RecipeCategory.REDSTONE, Items.REDSTONE, 0.7f, 200, "redstone");
        VanillaRecipeProvider.oreSmelting($$0, EMERALD_SMELTABLES, RecipeCategory.MISC, Items.EMERALD, 1.0f, 200, "emerald");
        VanillaRecipeProvider.nineBlockStorageRecipes($$0, RecipeCategory.MISC, Items.RAW_IRON, RecipeCategory.BUILDING_BLOCKS, Items.RAW_IRON_BLOCK);
        VanillaRecipeProvider.nineBlockStorageRecipes($$0, RecipeCategory.MISC, Items.RAW_COPPER, RecipeCategory.BUILDING_BLOCKS, Items.RAW_COPPER_BLOCK);
        VanillaRecipeProvider.nineBlockStorageRecipes($$0, RecipeCategory.MISC, Items.RAW_GOLD, RecipeCategory.BUILDING_BLOCKS, Items.RAW_GOLD_BLOCK);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(ItemTags.SAND), RecipeCategory.BUILDING_BLOCKS, Blocks.GLASS.asItem(), 0.1f, 200).unlockedBy("has_sand", VanillaRecipeProvider.has(ItemTags.SAND)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.SEA_PICKLE), RecipeCategory.MISC, Items.LIME_DYE, 0.1f, 200).unlockedBy("has_sea_pickle", VanillaRecipeProvider.has(Blocks.SEA_PICKLE)).save($$0, VanillaRecipeProvider.getSmeltingRecipeName(Items.LIME_DYE));
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.CACTUS.asItem()), RecipeCategory.MISC, Items.GREEN_DYE, 1.0f, 200).unlockedBy("has_cactus", VanillaRecipeProvider.has(Blocks.CACTUS)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.GOLDEN_PICKAXE, Items.GOLDEN_SHOVEL, Items.GOLDEN_AXE, Items.GOLDEN_HOE, Items.GOLDEN_SWORD, Items.GOLDEN_HELMET, Items.GOLDEN_CHESTPLATE, Items.GOLDEN_LEGGINGS, Items.GOLDEN_BOOTS, Items.GOLDEN_HORSE_ARMOR), RecipeCategory.MISC, Items.GOLD_NUGGET, 0.1f, 200).unlockedBy("has_golden_pickaxe", VanillaRecipeProvider.has(Items.GOLDEN_PICKAXE)).unlockedBy("has_golden_shovel", VanillaRecipeProvider.has(Items.GOLDEN_SHOVEL)).unlockedBy("has_golden_axe", VanillaRecipeProvider.has(Items.GOLDEN_AXE)).unlockedBy("has_golden_hoe", VanillaRecipeProvider.has(Items.GOLDEN_HOE)).unlockedBy("has_golden_sword", VanillaRecipeProvider.has(Items.GOLDEN_SWORD)).unlockedBy("has_golden_helmet", VanillaRecipeProvider.has(Items.GOLDEN_HELMET)).unlockedBy("has_golden_chestplate", VanillaRecipeProvider.has(Items.GOLDEN_CHESTPLATE)).unlockedBy("has_golden_leggings", VanillaRecipeProvider.has(Items.GOLDEN_LEGGINGS)).unlockedBy("has_golden_boots", VanillaRecipeProvider.has(Items.GOLDEN_BOOTS)).unlockedBy("has_golden_horse_armor", VanillaRecipeProvider.has(Items.GOLDEN_HORSE_ARMOR)).save($$0, VanillaRecipeProvider.getSmeltingRecipeName(Items.GOLD_NUGGET));
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Items.IRON_PICKAXE, Items.IRON_SHOVEL, Items.IRON_AXE, Items.IRON_HOE, Items.IRON_SWORD, Items.IRON_HELMET, Items.IRON_CHESTPLATE, Items.IRON_LEGGINGS, Items.IRON_BOOTS, Items.IRON_HORSE_ARMOR, Items.CHAINMAIL_HELMET, Items.CHAINMAIL_CHESTPLATE, Items.CHAINMAIL_LEGGINGS, Items.CHAINMAIL_BOOTS), RecipeCategory.MISC, Items.IRON_NUGGET, 0.1f, 200).unlockedBy("has_iron_pickaxe", VanillaRecipeProvider.has(Items.IRON_PICKAXE)).unlockedBy("has_iron_shovel", VanillaRecipeProvider.has(Items.IRON_SHOVEL)).unlockedBy("has_iron_axe", VanillaRecipeProvider.has(Items.IRON_AXE)).unlockedBy("has_iron_hoe", VanillaRecipeProvider.has(Items.IRON_HOE)).unlockedBy("has_iron_sword", VanillaRecipeProvider.has(Items.IRON_SWORD)).unlockedBy("has_iron_helmet", VanillaRecipeProvider.has(Items.IRON_HELMET)).unlockedBy("has_iron_chestplate", VanillaRecipeProvider.has(Items.IRON_CHESTPLATE)).unlockedBy("has_iron_leggings", VanillaRecipeProvider.has(Items.IRON_LEGGINGS)).unlockedBy("has_iron_boots", VanillaRecipeProvider.has(Items.IRON_BOOTS)).unlockedBy("has_iron_horse_armor", VanillaRecipeProvider.has(Items.IRON_HORSE_ARMOR)).unlockedBy("has_chainmail_helmet", VanillaRecipeProvider.has(Items.CHAINMAIL_HELMET)).unlockedBy("has_chainmail_chestplate", VanillaRecipeProvider.has(Items.CHAINMAIL_CHESTPLATE)).unlockedBy("has_chainmail_leggings", VanillaRecipeProvider.has(Items.CHAINMAIL_LEGGINGS)).unlockedBy("has_chainmail_boots", VanillaRecipeProvider.has(Items.CHAINMAIL_BOOTS)).save($$0, VanillaRecipeProvider.getSmeltingRecipeName(Items.IRON_NUGGET));
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.CLAY), RecipeCategory.BUILDING_BLOCKS, Blocks.TERRACOTTA.asItem(), 0.35f, 200).unlockedBy("has_clay_block", VanillaRecipeProvider.has(Blocks.CLAY)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.NETHERRACK), RecipeCategory.MISC, Items.NETHER_BRICK, 0.1f, 200).unlockedBy("has_netherrack", VanillaRecipeProvider.has(Blocks.NETHERRACK)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.NETHER_QUARTZ_ORE), RecipeCategory.MISC, Items.QUARTZ, 0.2f, 200).unlockedBy("has_nether_quartz_ore", VanillaRecipeProvider.has(Blocks.NETHER_QUARTZ_ORE)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.WET_SPONGE), RecipeCategory.BUILDING_BLOCKS, Blocks.SPONGE.asItem(), 0.15f, 200).unlockedBy("has_wet_sponge", VanillaRecipeProvider.has(Blocks.WET_SPONGE)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.COBBLESTONE), RecipeCategory.BUILDING_BLOCKS, Blocks.STONE.asItem(), 0.1f, 200).unlockedBy("has_cobblestone", VanillaRecipeProvider.has(Blocks.COBBLESTONE)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.STONE), RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_STONE.asItem(), 0.1f, 200).unlockedBy("has_stone", VanillaRecipeProvider.has(Blocks.STONE)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.SANDSTONE), RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_SANDSTONE.asItem(), 0.1f, 200).unlockedBy("has_sandstone", VanillaRecipeProvider.has(Blocks.SANDSTONE)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.RED_SANDSTONE), RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_RED_SANDSTONE.asItem(), 0.1f, 200).unlockedBy("has_red_sandstone", VanillaRecipeProvider.has(Blocks.RED_SANDSTONE)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.QUARTZ_BLOCK), RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_QUARTZ.asItem(), 0.1f, 200).unlockedBy("has_quartz_block", VanillaRecipeProvider.has(Blocks.QUARTZ_BLOCK)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.STONE_BRICKS), RecipeCategory.BUILDING_BLOCKS, Blocks.CRACKED_STONE_BRICKS.asItem(), 0.1f, 200).unlockedBy("has_stone_bricks", VanillaRecipeProvider.has(Blocks.STONE_BRICKS)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.BLACK_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.BLACK_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_black_terracotta", VanillaRecipeProvider.has(Blocks.BLACK_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.BLUE_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.BLUE_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_blue_terracotta", VanillaRecipeProvider.has(Blocks.BLUE_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.BROWN_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.BROWN_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_brown_terracotta", VanillaRecipeProvider.has(Blocks.BROWN_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.CYAN_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.CYAN_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_cyan_terracotta", VanillaRecipeProvider.has(Blocks.CYAN_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.GRAY_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.GRAY_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_gray_terracotta", VanillaRecipeProvider.has(Blocks.GRAY_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.GREEN_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.GREEN_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_green_terracotta", VanillaRecipeProvider.has(Blocks.GREEN_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.LIGHT_BLUE_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_light_blue_terracotta", VanillaRecipeProvider.has(Blocks.LIGHT_BLUE_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.LIGHT_GRAY_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_light_gray_terracotta", VanillaRecipeProvider.has(Blocks.LIGHT_GRAY_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.LIME_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.LIME_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_lime_terracotta", VanillaRecipeProvider.has(Blocks.LIME_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.MAGENTA_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.MAGENTA_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_magenta_terracotta", VanillaRecipeProvider.has(Blocks.MAGENTA_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.ORANGE_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.ORANGE_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_orange_terracotta", VanillaRecipeProvider.has(Blocks.ORANGE_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.PINK_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.PINK_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_pink_terracotta", VanillaRecipeProvider.has(Blocks.PINK_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.PURPLE_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.PURPLE_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_purple_terracotta", VanillaRecipeProvider.has(Blocks.PURPLE_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.RED_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.RED_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_red_terracotta", VanillaRecipeProvider.has(Blocks.RED_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.WHITE_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.WHITE_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_white_terracotta", VanillaRecipeProvider.has(Blocks.WHITE_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.YELLOW_TERRACOTTA), RecipeCategory.DECORATIONS, Blocks.YELLOW_GLAZED_TERRACOTTA.asItem(), 0.1f, 200).unlockedBy("has_yellow_terracotta", VanillaRecipeProvider.has(Blocks.YELLOW_TERRACOTTA)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.ANCIENT_DEBRIS), RecipeCategory.MISC, Items.NETHERITE_SCRAP, 2.0f, 200).unlockedBy("has_ancient_debris", VanillaRecipeProvider.has(Blocks.ANCIENT_DEBRIS)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.BASALT), RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_BASALT, 0.1f, 200).unlockedBy("has_basalt", VanillaRecipeProvider.has(Blocks.BASALT)).save($$0);
        SimpleCookingRecipeBuilder.smelting(Ingredient.of(Blocks.COBBLED_DEEPSLATE), RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE, 0.1f, 200).unlockedBy("has_cobbled_deepslate", VanillaRecipeProvider.has(Blocks.COBBLED_DEEPSLATE)).save($$0);
        VanillaRecipeProvider.oreBlasting($$0, COAL_SMELTABLES, RecipeCategory.MISC, Items.COAL, 0.1f, 100, "coal");
        VanillaRecipeProvider.oreBlasting($$0, IRON_SMELTABLES, RecipeCategory.MISC, Items.IRON_INGOT, 0.7f, 100, "iron_ingot");
        VanillaRecipeProvider.oreBlasting($$0, COPPER_SMELTABLES, RecipeCategory.MISC, Items.COPPER_INGOT, 0.7f, 100, "copper_ingot");
        VanillaRecipeProvider.oreBlasting($$0, GOLD_SMELTABLES, RecipeCategory.MISC, Items.GOLD_INGOT, 1.0f, 100, "gold_ingot");
        VanillaRecipeProvider.oreBlasting($$0, DIAMOND_SMELTABLES, RecipeCategory.MISC, Items.DIAMOND, 1.0f, 100, "diamond");
        VanillaRecipeProvider.oreBlasting($$0, LAPIS_SMELTABLES, RecipeCategory.MISC, Items.LAPIS_LAZULI, 0.2f, 100, "lapis_lazuli");
        VanillaRecipeProvider.oreBlasting($$0, REDSTONE_SMELTABLES, RecipeCategory.REDSTONE, Items.REDSTONE, 0.7f, 100, "redstone");
        VanillaRecipeProvider.oreBlasting($$0, EMERALD_SMELTABLES, RecipeCategory.MISC, Items.EMERALD, 1.0f, 100, "emerald");
        SimpleCookingRecipeBuilder.blasting(Ingredient.of(Blocks.NETHER_QUARTZ_ORE), RecipeCategory.MISC, Items.QUARTZ, 0.2f, 100).unlockedBy("has_nether_quartz_ore", VanillaRecipeProvider.has(Blocks.NETHER_QUARTZ_ORE)).save($$0, VanillaRecipeProvider.getBlastingRecipeName(Items.QUARTZ));
        SimpleCookingRecipeBuilder.blasting(Ingredient.of(Items.GOLDEN_PICKAXE, Items.GOLDEN_SHOVEL, Items.GOLDEN_AXE, Items.GOLDEN_HOE, Items.GOLDEN_SWORD, Items.GOLDEN_HELMET, Items.GOLDEN_CHESTPLATE, Items.GOLDEN_LEGGINGS, Items.GOLDEN_BOOTS, Items.GOLDEN_HORSE_ARMOR), RecipeCategory.MISC, Items.GOLD_NUGGET, 0.1f, 100).unlockedBy("has_golden_pickaxe", VanillaRecipeProvider.has(Items.GOLDEN_PICKAXE)).unlockedBy("has_golden_shovel", VanillaRecipeProvider.has(Items.GOLDEN_SHOVEL)).unlockedBy("has_golden_axe", VanillaRecipeProvider.has(Items.GOLDEN_AXE)).unlockedBy("has_golden_hoe", VanillaRecipeProvider.has(Items.GOLDEN_HOE)).unlockedBy("has_golden_sword", VanillaRecipeProvider.has(Items.GOLDEN_SWORD)).unlockedBy("has_golden_helmet", VanillaRecipeProvider.has(Items.GOLDEN_HELMET)).unlockedBy("has_golden_chestplate", VanillaRecipeProvider.has(Items.GOLDEN_CHESTPLATE)).unlockedBy("has_golden_leggings", VanillaRecipeProvider.has(Items.GOLDEN_LEGGINGS)).unlockedBy("has_golden_boots", VanillaRecipeProvider.has(Items.GOLDEN_BOOTS)).unlockedBy("has_golden_horse_armor", VanillaRecipeProvider.has(Items.GOLDEN_HORSE_ARMOR)).save($$0, VanillaRecipeProvider.getBlastingRecipeName(Items.GOLD_NUGGET));
        SimpleCookingRecipeBuilder.blasting(Ingredient.of(Items.IRON_PICKAXE, Items.IRON_SHOVEL, Items.IRON_AXE, Items.IRON_HOE, Items.IRON_SWORD, Items.IRON_HELMET, Items.IRON_CHESTPLATE, Items.IRON_LEGGINGS, Items.IRON_BOOTS, Items.IRON_HORSE_ARMOR, Items.CHAINMAIL_HELMET, Items.CHAINMAIL_CHESTPLATE, Items.CHAINMAIL_LEGGINGS, Items.CHAINMAIL_BOOTS), RecipeCategory.MISC, Items.IRON_NUGGET, 0.1f, 100).unlockedBy("has_iron_pickaxe", VanillaRecipeProvider.has(Items.IRON_PICKAXE)).unlockedBy("has_iron_shovel", VanillaRecipeProvider.has(Items.IRON_SHOVEL)).unlockedBy("has_iron_axe", VanillaRecipeProvider.has(Items.IRON_AXE)).unlockedBy("has_iron_hoe", VanillaRecipeProvider.has(Items.IRON_HOE)).unlockedBy("has_iron_sword", VanillaRecipeProvider.has(Items.IRON_SWORD)).unlockedBy("has_iron_helmet", VanillaRecipeProvider.has(Items.IRON_HELMET)).unlockedBy("has_iron_chestplate", VanillaRecipeProvider.has(Items.IRON_CHESTPLATE)).unlockedBy("has_iron_leggings", VanillaRecipeProvider.has(Items.IRON_LEGGINGS)).unlockedBy("has_iron_boots", VanillaRecipeProvider.has(Items.IRON_BOOTS)).unlockedBy("has_iron_horse_armor", VanillaRecipeProvider.has(Items.IRON_HORSE_ARMOR)).unlockedBy("has_chainmail_helmet", VanillaRecipeProvider.has(Items.CHAINMAIL_HELMET)).unlockedBy("has_chainmail_chestplate", VanillaRecipeProvider.has(Items.CHAINMAIL_CHESTPLATE)).unlockedBy("has_chainmail_leggings", VanillaRecipeProvider.has(Items.CHAINMAIL_LEGGINGS)).unlockedBy("has_chainmail_boots", VanillaRecipeProvider.has(Items.CHAINMAIL_BOOTS)).save($$0, VanillaRecipeProvider.getBlastingRecipeName(Items.IRON_NUGGET));
        SimpleCookingRecipeBuilder.blasting(Ingredient.of(Blocks.ANCIENT_DEBRIS), RecipeCategory.MISC, Items.NETHERITE_SCRAP, 2.0f, 100).unlockedBy("has_ancient_debris", VanillaRecipeProvider.has(Blocks.ANCIENT_DEBRIS)).save($$0, VanillaRecipeProvider.getBlastingRecipeName(Items.NETHERITE_SCRAP));
        VanillaRecipeProvider.cookRecipes($$0, "smoking", RecipeSerializer.SMOKING_RECIPE, 100);
        VanillaRecipeProvider.cookRecipes($$0, "campfire_cooking", RecipeSerializer.CAMPFIRE_COOKING_RECIPE, 600);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.STONE_SLAB, Blocks.STONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.STONE_STAIRS, Blocks.STONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.STONE_BRICKS, Blocks.STONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.STONE_BRICK_SLAB, Blocks.STONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.STONE_BRICK_STAIRS, Blocks.STONE);
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.STONE), RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_STONE_BRICKS).unlockedBy("has_stone", VanillaRecipeProvider.has(Blocks.STONE)).save($$0, "chiseled_stone_bricks_stone_from_stonecutting");
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.STONE), RecipeCategory.DECORATIONS, Blocks.STONE_BRICK_WALL).unlockedBy("has_stone", VanillaRecipeProvider.has(Blocks.STONE)).save($$0, "stone_brick_walls_from_stone_stonecutting");
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_SANDSTONE, Blocks.SANDSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SANDSTONE_SLAB, Blocks.SANDSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_SANDSTONE_SLAB, Blocks.SANDSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_SANDSTONE_SLAB, Blocks.CUT_SANDSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SANDSTONE_STAIRS, Blocks.SANDSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.SANDSTONE_WALL, Blocks.SANDSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_SANDSTONE, Blocks.SANDSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_RED_SANDSTONE, Blocks.RED_SANDSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.RED_SANDSTONE_SLAB, Blocks.RED_SANDSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_RED_SANDSTONE_SLAB, Blocks.RED_SANDSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_RED_SANDSTONE_SLAB, Blocks.CUT_RED_SANDSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.RED_SANDSTONE_STAIRS, Blocks.RED_SANDSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.RED_SANDSTONE_WALL, Blocks.RED_SANDSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_RED_SANDSTONE, Blocks.RED_SANDSTONE);
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.QUARTZ_BLOCK), RecipeCategory.BUILDING_BLOCKS, Blocks.QUARTZ_SLAB, 2).unlockedBy("has_quartz_block", VanillaRecipeProvider.has(Blocks.QUARTZ_BLOCK)).save($$0, "quartz_slab_from_stonecutting");
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.QUARTZ_STAIRS, Blocks.QUARTZ_BLOCK);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.QUARTZ_PILLAR, Blocks.QUARTZ_BLOCK);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_QUARTZ_BLOCK, Blocks.QUARTZ_BLOCK);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.QUARTZ_BRICKS, Blocks.QUARTZ_BLOCK);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.COBBLESTONE_STAIRS, Blocks.COBBLESTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.COBBLESTONE_SLAB, Blocks.COBBLESTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.COBBLESTONE_WALL, Blocks.COBBLESTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.STONE_BRICK_SLAB, Blocks.STONE_BRICKS, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.STONE_BRICK_STAIRS, Blocks.STONE_BRICKS);
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.STONE_BRICKS), RecipeCategory.DECORATIONS, Blocks.STONE_BRICK_WALL).unlockedBy("has_stone_bricks", VanillaRecipeProvider.has(Blocks.STONE_BRICKS)).save($$0, "stone_brick_wall_from_stone_bricks_stonecutting");
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_STONE_BRICKS, Blocks.STONE_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.BRICK_SLAB, Blocks.BRICKS, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.BRICK_STAIRS, Blocks.BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.BRICK_WALL, Blocks.BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.MUD_BRICK_SLAB, Blocks.MUD_BRICKS, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.MUD_BRICK_STAIRS, Blocks.MUD_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.MUD_BRICK_WALL, Blocks.MUD_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.NETHER_BRICK_SLAB, Blocks.NETHER_BRICKS, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.NETHER_BRICK_STAIRS, Blocks.NETHER_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.NETHER_BRICK_WALL, Blocks.NETHER_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_NETHER_BRICKS, Blocks.NETHER_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.RED_NETHER_BRICK_SLAB, Blocks.RED_NETHER_BRICKS, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.RED_NETHER_BRICK_STAIRS, Blocks.RED_NETHER_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.RED_NETHER_BRICK_WALL, Blocks.RED_NETHER_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.PURPUR_SLAB, Blocks.PURPUR_BLOCK, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.PURPUR_STAIRS, Blocks.PURPUR_BLOCK);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.PURPUR_PILLAR, Blocks.PURPUR_BLOCK);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.PRISMARINE_SLAB, Blocks.PRISMARINE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.PRISMARINE_STAIRS, Blocks.PRISMARINE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.PRISMARINE_WALL, Blocks.PRISMARINE);
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.PRISMARINE_BRICKS), RecipeCategory.BUILDING_BLOCKS, Blocks.PRISMARINE_BRICK_SLAB, 2).unlockedBy("has_prismarine_brick", VanillaRecipeProvider.has(Blocks.PRISMARINE_BRICKS)).save($$0, "prismarine_brick_slab_from_prismarine_stonecutting");
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.PRISMARINE_BRICKS), RecipeCategory.BUILDING_BLOCKS, Blocks.PRISMARINE_BRICK_STAIRS).unlockedBy("has_prismarine_brick", VanillaRecipeProvider.has(Blocks.PRISMARINE_BRICKS)).save($$0, "prismarine_brick_stairs_from_prismarine_stonecutting");
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DARK_PRISMARINE_SLAB, Blocks.DARK_PRISMARINE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DARK_PRISMARINE_STAIRS, Blocks.DARK_PRISMARINE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.ANDESITE_SLAB, Blocks.ANDESITE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.ANDESITE_STAIRS, Blocks.ANDESITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.ANDESITE_WALL, Blocks.ANDESITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_ANDESITE, Blocks.ANDESITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_ANDESITE_SLAB, Blocks.ANDESITE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_ANDESITE_STAIRS, Blocks.ANDESITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_ANDESITE_SLAB, Blocks.POLISHED_ANDESITE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_ANDESITE_STAIRS, Blocks.POLISHED_ANDESITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BASALT, Blocks.BASALT);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.GRANITE_SLAB, Blocks.GRANITE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.GRANITE_STAIRS, Blocks.GRANITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.GRANITE_WALL, Blocks.GRANITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_GRANITE, Blocks.GRANITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_GRANITE_SLAB, Blocks.GRANITE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_GRANITE_STAIRS, Blocks.GRANITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_GRANITE_SLAB, Blocks.POLISHED_GRANITE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_GRANITE_STAIRS, Blocks.POLISHED_GRANITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DIORITE_SLAB, Blocks.DIORITE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DIORITE_STAIRS, Blocks.DIORITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.DIORITE_WALL, Blocks.DIORITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_DIORITE, Blocks.DIORITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_DIORITE_SLAB, Blocks.DIORITE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_DIORITE_STAIRS, Blocks.DIORITE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_DIORITE_SLAB, Blocks.POLISHED_DIORITE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_DIORITE_STAIRS, Blocks.POLISHED_DIORITE);
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.MOSSY_STONE_BRICKS), RecipeCategory.BUILDING_BLOCKS, Blocks.MOSSY_STONE_BRICK_SLAB, 2).unlockedBy("has_mossy_stone_bricks", VanillaRecipeProvider.has(Blocks.MOSSY_STONE_BRICKS)).save($$0, "mossy_stone_brick_slab_from_mossy_stone_brick_stonecutting");
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.MOSSY_STONE_BRICKS), RecipeCategory.BUILDING_BLOCKS, Blocks.MOSSY_STONE_BRICK_STAIRS).unlockedBy("has_mossy_stone_bricks", VanillaRecipeProvider.has(Blocks.MOSSY_STONE_BRICKS)).save($$0, "mossy_stone_brick_stairs_from_mossy_stone_brick_stonecutting");
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.MOSSY_STONE_BRICKS), RecipeCategory.DECORATIONS, Blocks.MOSSY_STONE_BRICK_WALL).unlockedBy("has_mossy_stone_bricks", VanillaRecipeProvider.has(Blocks.MOSSY_STONE_BRICKS)).save($$0, "mossy_stone_brick_wall_from_mossy_stone_brick_stonecutting");
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.MOSSY_COBBLESTONE_SLAB, Blocks.MOSSY_COBBLESTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.MOSSY_COBBLESTONE_STAIRS, Blocks.MOSSY_COBBLESTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.MOSSY_COBBLESTONE_WALL, Blocks.MOSSY_COBBLESTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_SANDSTONE_SLAB, Blocks.SMOOTH_SANDSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_SANDSTONE_STAIRS, Blocks.SMOOTH_SANDSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_RED_SANDSTONE_SLAB, Blocks.SMOOTH_RED_SANDSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_RED_SANDSTONE_STAIRS, Blocks.SMOOTH_RED_SANDSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_QUARTZ_SLAB, Blocks.SMOOTH_QUARTZ, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_QUARTZ_STAIRS, Blocks.SMOOTH_QUARTZ);
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.END_STONE_BRICKS), RecipeCategory.BUILDING_BLOCKS, Blocks.END_STONE_BRICK_SLAB, 2).unlockedBy("has_end_stone_brick", VanillaRecipeProvider.has(Blocks.END_STONE_BRICKS)).save($$0, "end_stone_brick_slab_from_end_stone_brick_stonecutting");
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.END_STONE_BRICKS), RecipeCategory.BUILDING_BLOCKS, Blocks.END_STONE_BRICK_STAIRS).unlockedBy("has_end_stone_brick", VanillaRecipeProvider.has(Blocks.END_STONE_BRICKS)).save($$0, "end_stone_brick_stairs_from_end_stone_brick_stonecutting");
        SingleItemRecipeBuilder.stonecutting(Ingredient.of(Blocks.END_STONE_BRICKS), RecipeCategory.DECORATIONS, Blocks.END_STONE_BRICK_WALL).unlockedBy("has_end_stone_brick", VanillaRecipeProvider.has(Blocks.END_STONE_BRICKS)).save($$0, "end_stone_brick_wall_from_end_stone_brick_stonecutting");
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.END_STONE_BRICKS, Blocks.END_STONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.END_STONE_BRICK_SLAB, Blocks.END_STONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.END_STONE_BRICK_STAIRS, Blocks.END_STONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.END_STONE_BRICK_WALL, Blocks.END_STONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.SMOOTH_STONE_SLAB, Blocks.SMOOTH_STONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.BLACKSTONE_SLAB, Blocks.BLACKSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.BLACKSTONE_STAIRS, Blocks.BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.BLACKSTONE_WALL, Blocks.BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE, Blocks.BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.POLISHED_BLACKSTONE_WALL, Blocks.BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_SLAB, Blocks.BLACKSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_STAIRS, Blocks.BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_POLISHED_BLACKSTONE, Blocks.BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_BRICKS, Blocks.BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_BRICK_SLAB, Blocks.BLACKSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_BRICK_STAIRS, Blocks.BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.POLISHED_BLACKSTONE_BRICK_WALL, Blocks.BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_SLAB, Blocks.POLISHED_BLACKSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_STAIRS, Blocks.POLISHED_BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_BRICKS, Blocks.POLISHED_BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.POLISHED_BLACKSTONE_WALL, Blocks.POLISHED_BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_BRICK_SLAB, Blocks.POLISHED_BLACKSTONE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_BRICK_STAIRS, Blocks.POLISHED_BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.POLISHED_BLACKSTONE_BRICK_WALL, Blocks.POLISHED_BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_POLISHED_BLACKSTONE, Blocks.POLISHED_BLACKSTONE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_BRICK_SLAB, Blocks.POLISHED_BLACKSTONE_BRICKS, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_BLACKSTONE_BRICK_STAIRS, Blocks.POLISHED_BLACKSTONE_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.POLISHED_BLACKSTONE_BRICK_WALL, Blocks.POLISHED_BLACKSTONE_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_COPPER_SLAB, Blocks.CUT_COPPER, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_COPPER_STAIRS, Blocks.CUT_COPPER);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_COPPER, Blocks.COPPER_BLOCK, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_COPPER_STAIRS, Blocks.COPPER_BLOCK, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CUT_COPPER_SLAB, Blocks.COPPER_BLOCK, 8);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.EXPOSED_CUT_COPPER, Blocks.EXPOSED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.EXPOSED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.EXPOSED_COPPER, 8);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WEATHERED_CUT_COPPER, Blocks.WEATHERED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WEATHERED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WEATHERED_COPPER, 8);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.OXIDIZED_CUT_COPPER, Blocks.OXIDIZED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.OXIDIZED_COPPER, 8);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_CUT_COPPER, Blocks.WAXED_COPPER_BLOCK, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_CUT_COPPER_STAIRS, Blocks.WAXED_COPPER_BLOCK, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_CUT_COPPER_SLAB, Blocks.WAXED_COPPER_BLOCK, 8);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_EXPOSED_CUT_COPPER, Blocks.WAXED_EXPOSED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_COPPER, 8);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_WEATHERED_CUT_COPPER, Blocks.WAXED_WEATHERED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_COPPER, 8);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_OXIDIZED_CUT_COPPER, Blocks.WAXED_OXIDIZED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_COPPER, 4);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_COPPER, 8);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.COBBLED_DEEPSLATE_SLAB, Blocks.COBBLED_DEEPSLATE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.COBBLED_DEEPSLATE_STAIRS, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.COBBLED_DEEPSLATE_WALL, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.CHISELED_DEEPSLATE, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_DEEPSLATE, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_DEEPSLATE_SLAB, Blocks.COBBLED_DEEPSLATE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_DEEPSLATE_STAIRS, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.POLISHED_DEEPSLATE_WALL, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_BRICKS, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_BRICK_SLAB, Blocks.COBBLED_DEEPSLATE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_BRICK_STAIRS, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.DEEPSLATE_BRICK_WALL, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILES, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILE_SLAB, Blocks.COBBLED_DEEPSLATE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILE_STAIRS, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.DEEPSLATE_TILE_WALL, Blocks.COBBLED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_DEEPSLATE_SLAB, Blocks.POLISHED_DEEPSLATE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.POLISHED_DEEPSLATE_STAIRS, Blocks.POLISHED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.POLISHED_DEEPSLATE_WALL, Blocks.POLISHED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_BRICKS, Blocks.POLISHED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_BRICK_SLAB, Blocks.POLISHED_DEEPSLATE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_BRICK_STAIRS, Blocks.POLISHED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.DEEPSLATE_BRICK_WALL, Blocks.POLISHED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILES, Blocks.POLISHED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILE_SLAB, Blocks.POLISHED_DEEPSLATE, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILE_STAIRS, Blocks.POLISHED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.DEEPSLATE_TILE_WALL, Blocks.POLISHED_DEEPSLATE);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_BRICK_SLAB, Blocks.DEEPSLATE_BRICKS, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_BRICK_STAIRS, Blocks.DEEPSLATE_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.DEEPSLATE_BRICK_WALL, Blocks.DEEPSLATE_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILES, Blocks.DEEPSLATE_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILE_SLAB, Blocks.DEEPSLATE_BRICKS, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILE_STAIRS, Blocks.DEEPSLATE_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.DEEPSLATE_TILE_WALL, Blocks.DEEPSLATE_BRICKS);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILE_SLAB, Blocks.DEEPSLATE_TILES, 2);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.BUILDING_BLOCKS, Blocks.DEEPSLATE_TILE_STAIRS, Blocks.DEEPSLATE_TILES);
        VanillaRecipeProvider.stonecutterResultFromBase($$0, RecipeCategory.DECORATIONS, Blocks.DEEPSLATE_TILE_WALL, Blocks.DEEPSLATE_TILES);
        VanillaRecipeProvider.legacyNetheriteSmithing($$0, Items.DIAMOND_CHESTPLATE, RecipeCategory.COMBAT, Items.NETHERITE_CHESTPLATE);
        VanillaRecipeProvider.legacyNetheriteSmithing($$0, Items.DIAMOND_LEGGINGS, RecipeCategory.COMBAT, Items.NETHERITE_LEGGINGS);
        VanillaRecipeProvider.legacyNetheriteSmithing($$0, Items.DIAMOND_HELMET, RecipeCategory.COMBAT, Items.NETHERITE_HELMET);
        VanillaRecipeProvider.legacyNetheriteSmithing($$0, Items.DIAMOND_BOOTS, RecipeCategory.COMBAT, Items.NETHERITE_BOOTS);
        VanillaRecipeProvider.legacyNetheriteSmithing($$0, Items.DIAMOND_SWORD, RecipeCategory.COMBAT, Items.NETHERITE_SWORD);
        VanillaRecipeProvider.legacyNetheriteSmithing($$0, Items.DIAMOND_AXE, RecipeCategory.TOOLS, Items.NETHERITE_AXE);
        VanillaRecipeProvider.legacyNetheriteSmithing($$0, Items.DIAMOND_PICKAXE, RecipeCategory.TOOLS, Items.NETHERITE_PICKAXE);
        VanillaRecipeProvider.legacyNetheriteSmithing($$0, Items.DIAMOND_HOE, RecipeCategory.TOOLS, Items.NETHERITE_HOE);
        VanillaRecipeProvider.legacyNetheriteSmithing($$0, Items.DIAMOND_SHOVEL, RecipeCategory.TOOLS, Items.NETHERITE_SHOVEL);
    }
}